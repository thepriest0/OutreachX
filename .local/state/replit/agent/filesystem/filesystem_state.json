{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OutreachX - AI-Powered Lead & Outreach Dashboard\n\n## Overview\n\nOutreachX is a comprehensive web application designed for design studios to manage leads and automate cold outreach campaigns using AI-powered email generation. The application provides a complete solution for lead management, email campaign automation, analytics tracking, and AI-driven insights to help design studios scale their business development efforts.\n\nThe system integrates Google's Gemini AI for intelligent email generation, supports bulk lead import/export via CSV, provides detailed analytics and reporting, and includes role-based authentication with team collaboration features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: TailwindCSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Custom OpenID Connect implementation with Replit Auth\n- **Session Management**: Express sessions with PostgreSQL session store\n- **File Processing**: Multer for handling CSV uploads and file operations\n\n### Database Design\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations with schema-first approach\n- **Key Tables**:\n  - Users with role-based access (founder, strategist, designer)\n  - Leads with status tracking and contact information\n  - Email campaigns with delivery status and response tracking\n  - AI-generated insights for performance optimization\n  - Session storage for authentication persistence\n\n### AI Integration\n- **Provider**: Google Gemini AI (Generative AI SDK)\n- **Capabilities**: \n  - Cold email generation with customizable tone (professional, casual, direct)\n  - Follow-up email sequences with context awareness\n  - Business insights generation based on lead and campaign data\n- **Implementation**: Structured JSON responses with schema validation for reliable AI output\n\n### Authentication & Security\n- **Authentication Method**: OpenID Connect with Replit identity provider\n- **Session Management**: Secure HTTP-only cookies with PostgreSQL session storage\n- **Authorization**: Role-based access control with middleware protection\n- **Security Headers**: CSRF protection, secure cookie settings, and request validation\n\n### File Processing & Data Management\n- **CSV Operations**: Parse, validate, and bulk import leads with error handling\n- **Template Generation**: Dynamic CSV template creation for standardized imports\n- **Data Validation**: Zod schemas for runtime type checking and data integrity\n- **Export Functionality**: Filtered lead data export with CSV formatting\n\n### API Architecture\n- **Pattern**: RESTful API design with consistent error handling\n- **Middleware**: Request logging, authentication validation, and error handling\n- **Response Format**: Standardized JSON responses with proper HTTP status codes\n- **File Upload**: Multipart form handling for CSV file processing\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database with connection pooling\n- **AI Service**: Google Gemini AI API for email generation and insights\n- **Authentication**: Replit OpenID Connect provider for user authentication\n- **Session Storage**: PostgreSQL-based session persistence\n\n### Development & Build Tools\n- **Build System**: Vite with React plugin for fast development and optimized builds\n- **Type Checking**: TypeScript compiler with strict mode enabled\n- **Code Quality**: ESLint and TypeScript for code validation\n- **Development Server**: Express with Vite middleware for HMR support\n\n### Email Integration (Planned)\n- **Email APIs**: Gmail/Outlook API integration for direct email sending\n- **SMTP Support**: Alternative SMTP configuration for email delivery\n- **OAuth Flow**: Secure email account connection with proper token management\n\n### Monitoring & Analytics\n- **Error Tracking**: Built-in error handling with structured logging\n- **Performance Monitoring**: Request timing and response logging\n- **Development Tools**: Replit-specific development banner and cartographer integration","size_bytes":4665},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, requireRole } from \"./auth\";\nimport { emailService } from \"./services/emailService\";\nimport { generateEmail } from \"./services/gemini\";\nimport { insertLeadSchema, insertEmailCampaignSchema, insertInsightSchema } from \"@shared/schema\";\nimport { generateColdEmail, generateFollowUpEmail, generateInsights } from \"./services/gemini\";\nimport { parseLeadsFromCSV, validateCSVLeads, convertLeadsToCSV, getCSVTemplate } from \"./services/csvHandler\";\nimport { followUpScheduler } from \"./services/followUpScheduler\";\nimport { emailTrackingService } from \"./services/emailTrackingService\";\nimport { GmailProvider } from \"./services/gmailService\";\nimport multer from \"multer\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Start follow-up scheduler\n  followUpScheduler.start();\n\n  // Email tracking routes\n  app.get('/api/email/track-open/:trackingId', async (req, res) => {\n    try {\n      await emailTrackingService.trackEmailOpen(req.params.trackingId);\n      // Return 1x1 transparent pixel\n      const pixel = Buffer.from(\n        'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7',\n        'base64'\n      );\n      res.writeHead(200, {\n        'Content-Type': 'image/gif',\n        'Content-Length': pixel.length,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      res.end(pixel);\n    } catch (error) {\n      console.error('Error tracking email open:', error);\n      res.status(500).end();\n    }\n  });\n\n  app.get('/api/email/track-click/:trackingId', async (req, res) => {\n    try {\n      const originalUrl = req.query.url as string;\n      if (!originalUrl) {\n        return res.status(400).json({ message: 'Missing URL parameter' });\n      }\n      \n      const redirectUrl = await emailTrackingService.trackEmailClick(req.params.trackingId, originalUrl);\n      res.redirect(302, redirectUrl);\n    } catch (error) {\n      console.error('Error tracking email click:', error);\n      res.status(500).json({ message: 'Tracking failed' });\n    }\n  });\n\n  // Gmail OAuth routes\n  app.get('/api/auth/gmail', async (req, res) => {\n    try {\n      if (!process.env.GMAIL_CLIENT_ID || !process.env.GMAIL_CLIENT_SECRET) {\n        return res.status(500).json({ message: 'Gmail OAuth not configured' });\n      }\n\n      const authUrl = await GmailProvider.getAuthUrl({\n        clientId: process.env.GMAIL_CLIENT_ID,\n        clientSecret: process.env.GMAIL_CLIENT_SECRET,\n        redirectUri: process.env.GMAIL_REDIRECT_URI || `${req.protocol}://${req.get('host')}/api/auth/gmail/callback`,\n      });\n\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error('Error generating Gmail auth URL:', error);\n      res.status(500).json({ message: 'Failed to initiate Gmail authentication' });\n    }\n  });\n\n  app.get('/api/auth/gmail/callback', async (req, res) => {\n    try {\n      const code = req.query.code as string;\n      if (!code) {\n        return res.status(400).json({ message: 'Missing authorization code' });\n      }\n\n      const tokens = await GmailProvider.getTokensFromCode(code, {\n        clientId: process.env.GMAIL_CLIENT_ID!,\n        clientSecret: process.env.GMAIL_CLIENT_SECRET!,\n        redirectUri: process.env.GMAIL_REDIRECT_URI || `${req.protocol}://${req.get('host')}/api/auth/gmail/callback`,\n      });\n\n      // In a real app, you'd store these tokens securely for the user\n      // For now, just return them (not secure - for demo only)\n      res.json({\n        message: 'Gmail authentication successful',\n        tokens: {\n          refreshToken: tokens.refreshToken,\n          accessToken: tokens.accessToken,\n        },\n        note: 'Store these tokens as environment variables: GMAIL_REFRESH_TOKEN and GMAIL_ACCESS_TOKEN'\n      });\n    } catch (error) {\n      console.error('Error handling Gmail callback:', error);\n      res.status(500).json({ message: 'Failed to complete Gmail authentication' });\n    }\n  });\n\n  // User info route (already handled in auth.ts)\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get('/api/dashboard/recent-leads', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const limit = parseInt(req.query.limit as string) || 5;\n      const leads = await storage.getRecentLeads(userId, limit);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching recent leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent leads\" });\n    }\n  });\n\n  // Leads routes\n  app.get('/api/leads', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const search = req.query.search as string;\n      \n      let leads;\n      if (search) {\n        leads = await storage.searchLeads(search, userId);\n      } else {\n        leads = await storage.getLeads(userId, limit);\n      }\n      \n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get('/api/leads/:id', requireAuth, async (req, res) => {\n    try {\n      const lead = await storage.getLeadById(req.params.id);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error fetching lead:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post('/api/leads', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead({ ...validatedData, createdBy: userId });\n      res.status(201).json(lead);\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(400).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.put('/api/leads/:id', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.partial().parse(req.body);\n      const lead = await storage.updateLead(req.params.id, validatedData);\n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error updating lead:\", error);\n      res.status(400).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete('/api/leads/:id', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteLead(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting lead:\", error);\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // CSV import/export routes\n  app.post('/api/leads/import', requireAuth, upload.single('file'), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const csvContent = req.file.buffer.toString('utf-8');\n      const parsedLeads = parseLeadsFromCSV(csvContent);\n      const { valid, errors } = validateCSVLeads(parsedLeads);\n\n      if (errors.length > 0) {\n        return res.status(400).json({ message: \"Validation errors\", errors });\n      }\n\n      const createdLeads = [];\n      for (const leadData of valid) {\n        const lead = await storage.createLead({ \n          ...leadData, \n          createdBy: userId,\n          status: \"new\"\n        });\n        createdLeads.push(lead);\n      }\n\n      res.json({ \n        message: `Successfully imported ${createdLeads.length} leads`,\n        leads: createdLeads\n      });\n    } catch (error) {\n      console.error(\"Error importing leads:\", error);\n      res.status(500).json({ message: \"Failed to import leads\" });\n    }\n  });\n\n  app.get('/api/leads/export', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const leads = await storage.getLeads(userId);\n      const csv = convertLeadsToCSV(leads);\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=leads.csv');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting leads:\", error);\n      res.status(500).json({ message: \"Failed to export leads\" });\n    }\n  });\n\n  app.get('/api/leads/csv-template', (req, res) => {\n    try {\n      const template = getCSVTemplate();\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=leads-template.csv');\n      res.send(template);\n    } catch (error) {\n      console.error(\"Error generating CSV template:\", error);\n      res.status(500).json({ message: \"Failed to generate CSV template\" });\n    }\n  });\n\n  // Email campaign routes\n  app.get('/api/email-campaigns', requireAuth, async (req, res) => {\n    try {\n      const leadId = req.query.leadId as string;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const campaigns = await storage.getEmailCampaigns(leadId, limit);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching email campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch email campaigns\" });\n    }\n  });\n\n  app.post('/api/email-campaigns', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertEmailCampaignSchema.parse(req.body);\n      const campaign = await storage.createEmailCampaign({ ...validatedData, createdBy: userId });\n      res.status(201).json(campaign);\n    } catch (error) {\n      console.error(\"Error creating email campaign:\", error);\n      res.status(400).json({ message: \"Failed to create email campaign\" });\n    }\n  });\n\n  app.put('/api/email-campaigns/:id', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertEmailCampaignSchema.partial().parse(req.body);\n      const campaign = await storage.updateEmailCampaign(req.params.id, validatedData);\n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error updating email campaign:\", error);\n      res.status(400).json({ message: \"Failed to update email campaign\" });\n    }\n  });\n\n  app.post('/api/email-campaigns/:id/send', requireAuth, async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.getEmailCampaignById(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      if (!campaign.leadId) {\n        return res.status(400).json({ message: \"Campaign has no associated lead\" });\n      }\n      \n      const result = await emailService.sendCampaignEmail(campaignId, campaign.leadId);\n      \n      if (result.success) {\n        res.json({ message: \"Email sent successfully\", result });\n      } else {\n        res.status(500).json({ message: \"Failed to send email\", error: result.error });\n      }\n    } catch (error) {\n      console.error(\"Error sending campaign:\", error);\n      res.status(500).json({ message: \"Failed to send campaign\" });\n    }\n  });\n\n  app.post('/api/email-campaigns/:id/schedule-followup', requireAuth, async (req: any, res) => {\n    try {\n      const campaignId = req.params.id;\n      const { delayDays } = req.body;\n      const userId = req.user.id;\n      \n      if (!delayDays || delayDays < 1 || delayDays > 30) {\n        return res.status(400).json({ message: \"Delay days must be between 1 and 30\" });\n      }\n      \n      const followUpId = await followUpScheduler.scheduleFollowUp(campaignId, delayDays, userId);\n      res.json({ message: \"Follow-up scheduled successfully\", followUpId });\n    } catch (error) {\n      console.error(\"Error scheduling follow-up:\", error);\n      res.status(500).json({ message: \"Failed to schedule follow-up\" });\n    }\n  });\n\n  // Add campaigns routes (alias for email-campaigns)\n  app.get('/api/campaigns', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const campaigns = await storage.getEmailCampaignsByUser(userId);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.delete('/api/campaigns/:id', requireAuth, async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.getEmailCampaignById(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      await storage.deleteEmailCampaign(campaignId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting campaign:\", error);\n      res.status(500).json({ message: \"Failed to delete campaign\" });\n    }\n  });\n\n  app.delete('/api/email-campaigns/:id/cancel-followups', requireAuth, async (req, res) => {\n    try {\n      const campaign = await storage.getEmailCampaignById(req.params.id);\n      if (!campaign || !campaign.leadId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      await followUpScheduler.cancelFollowUpsForLead(campaign.leadId);\n      res.json({ message: \"Follow-ups cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error cancelling follow-ups:\", error);\n      res.status(500).json({ message: \"Failed to cancel follow-ups\" });\n    }\n  });\n\n  app.get('/api/email-campaigns/:id/followups', requireAuth, async (req, res) => {\n    try {\n      const campaign = await storage.getEmailCampaignById(req.params.id);\n      if (!campaign || !campaign.leadId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      const followUps = await storage.getFollowUpCampaignsForLead(campaign.leadId);\n      res.json(followUps);\n    } catch (error) {\n      console.error(\"Error fetching follow-ups:\", error);\n      res.status(500).json({ message: \"Failed to fetch follow-ups\" });\n    }\n  });\n\n  app.post('/api/email-campaigns/:id/generate-followup', requireAuth, async (req, res) => {\n    try {\n      const { sequence, tone, delayDays } = req.body;\n      const campaign = await storage.getEmailCampaignById(req.params.id);\n      \n      if (!campaign || !campaign.leadId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      const lead = await storage.getLeadById(campaign.leadId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      const followUpEmail = await generateFollowUpEmail({\n        name: lead.name,\n        role: lead.role || 'Decision Maker',\n        company: lead.company,\n        tone: tone,\n        isFollowUp: true,\n        previousEmailContent: campaign.content,\n        followUpSequence: sequence,\n      });\n\n      res.json(followUpEmail);\n    } catch (error) {\n      console.error(\"Error generating follow-up email:\", error);\n      res.status(500).json({ message: \"Failed to generate follow-up email\" });\n    }\n  });\n\n  app.post('/api/email-campaigns/:id/update-followups', requireAuth, async (req, res) => {\n    try {\n      const { schedules } = req.body;\n      const userId = req.user.id;\n      const parentCampaign = await storage.getEmailCampaignById(req.params.id);\n      \n      if (!parentCampaign || !parentCampaign.leadId) {\n        return res.status(404).json({ message: \"Parent campaign not found\" });\n      }\n\n      // Cancel existing follow-ups first\n      await followUpScheduler.cancelFollowUpsForLead(parentCampaign.leadId);\n\n      const results = [];\n      for (const schedule of schedules) {\n        if (schedule.enabled && schedule.subject && schedule.content) {\n          const scheduledAt = new Date();\n          scheduledAt.setDate(scheduledAt.getDate() + schedule.delayDays);\n\n          const followUpCampaign = await storage.createEmailCampaign({\n            leadId: parentCampaign.leadId,\n            subject: schedule.subject,\n            content: schedule.content,\n            tone: schedule.tone,\n            status: 'draft',\n            isFollowUp: true,\n            followUpSequence: schedule.sequence,\n            parentEmailId: req.params.id,\n            scheduledAt,\n            createdBy: userId,\n          });\n\n          results.push(followUpCampaign);\n          console.log(`Follow-up #${schedule.sequence} scheduled for ${scheduledAt.toISOString()}`);\n        }\n      }\n\n      res.json({ message: \"Follow-up schedules updated successfully\", followUps: results });\n    } catch (error) {\n      console.error(\"Error updating follow-up schedules:\", error);\n      res.status(500).json({ message: \"Failed to update follow-up schedules\" });\n    }\n  });\n\n  app.delete('/api/email-campaigns/followup/:id', requireAuth, async (req, res) => {\n    try {\n      const followUpId = req.params.id;\n      await followUpScheduler.cancelFollowUp(followUpId);\n      res.json({ message: \"Follow-up deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting follow-up:\", error);\n      res.status(500).json({ message: \"Failed to delete follow-up\" });\n    }\n  });\n\n  app.post('/api/email-campaigns/:id/mark-replied', requireAuth, async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.getEmailCampaignById(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      await storage.updateEmailCampaign(campaignId, {\n        status: 'replied',\n        repliedAt: new Date(),\n      });\n      \n      // Cancel any scheduled follow-ups for this lead\n      if (campaign.leadId) {\n        await followUpScheduler.cancelFollowUpsForLead(campaign.leadId);\n      }\n      \n      res.json({ message: \"Campaign marked as replied successfully\" });\n    } catch (error) {\n      console.error(\"Error marking campaign as replied:\", error);\n      res.status(500).json({ message: \"Failed to mark campaign as replied\" });\n    }\n  });\n\n  app.get('/api/leads/:leadId/follow-ups', requireAuth, async (req, res) => {\n    try {\n      const leadId = req.params.leadId;\n      const followUps = await storage.getFollowUpCampaignsForLead(leadId);\n      \n      res.json(followUps);\n    } catch (error) {\n      console.error(\"Error getting follow-ups:\", error);\n      res.status(500).json({ message: \"Failed to get follow-ups\" });\n    }\n  });\n\n  // AI email generation routes\n  app.post('/api/ai/generate-email', requireAuth, async (req, res) => {\n    try {\n      const { leadId, tone, isFollowUp, parentEmailId } = req.body;\n      \n      const lead = await storage.getLeadById(leadId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      let generatedEmail;\n      if (isFollowUp && parentEmailId) {\n        const parentEmail = await storage.getEmailCampaignById(parentEmailId);\n        generatedEmail = await generateFollowUpEmail({\n          name: lead.name,\n          role: lead.role || 'Decision Maker',\n          company: lead.company,\n          tone,\n          isFollowUp: true,\n          previousEmailContent: parentEmail?.content || ''\n        });\n      } else {\n        generatedEmail = await generateColdEmail({\n          name: lead.name,\n          role: lead.role || 'Decision Maker',\n          company: lead.company,\n          tone\n        });\n      }\n\n      res.json(generatedEmail);\n    } catch (error) {\n      console.error(\"Error generating email:\", error);\n      res.status(500).json({ message: \"Failed to generate email\" });\n    }\n  });\n\n  // Email reply webhook (for Gmail integration)\n  app.post('/api/email/webhook/reply', async (req, res) => {\n    try {\n      const { messageId, from, subject, threadId } = req.body;\n      \n      // Find campaign by message ID or thread ID\n      const campaigns = await storage.getEmailCampaigns();\n      const campaign = campaigns.find(c => \n        c.messageId === messageId || \n        c.messageId === threadId ||\n        (c.trackingId && subject.includes(c.trackingId))\n      );\n      \n      if (campaign) {\n        await emailTrackingService.markEmailReplied(campaign.messageId || campaign.id);\n        console.log(`Email reply detected: Campaign ${campaign.id} from ${from}`);\n        res.json({ success: true, message: \"Reply tracked successfully\" });\n      } else {\n        console.log(`No campaign found for reply from ${from}`);\n        res.json({ success: false, message: \"Campaign not found\" });\n      }\n    } catch (error) {\n      console.error('Error processing email reply webhook:', error);\n      res.status(500).json({ error: 'Failed to process reply webhook' });\n    }\n  });\n\n  // Manual reply marking endpoint\n  app.post('/api/campaigns/:campaignId/mark-replied', async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const campaign = await storage.getEmailCampaignById(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n\n      await emailTrackingService.markEmailReplied(campaign.messageId || campaign.id);\n      res.json({ success: true, message: \"Campaign marked as replied\" });\n    } catch (error) {\n      console.error(\"Error marking campaign as replied:\", error);\n      res.status(500).json({ error: \"Failed to mark as replied\" });\n    }\n  });\n\n  // Email campaign tracking routes\n  app.get('/api/email/track/open/:trackingId', async (req, res) => {\n    try {\n      const { trackingId } = req.params;\n      await emailService.handleEmailOpen(trackingId);\n      \n      // Return 1x1 transparent pixel\n      const pixel = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');\n      res.set({\n        'Content-Type': 'image/gif',\n        'Content-Length': pixel.length.toString(),\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      });\n      res.send(pixel);\n    } catch (error) {\n      console.error(\"Error tracking email open:\", error);\n      res.status(200).send(); // Still return success to avoid broken images\n    }\n  });\n\n  app.get('/api/email/track/click/:trackingId', async (req, res) => {\n    try {\n      const { trackingId } = req.params;\n      const { url } = req.query;\n      \n      if (url) {\n        await emailService.handleEmailClick(trackingId, url as string);\n        res.redirect(url as string);\n      } else {\n        res.status(400).json({ message: \"URL parameter required\" });\n      }\n    } catch (error) {\n      console.error(\"Error tracking email click:\", error);\n      res.status(500).json({ message: \"Failed to track click\" });\n    }\n  });\n\n  app.post('/api/campaigns/:id/send', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { leadId } = req.body;\n      \n      if (!leadId) {\n        return res.status(400).json({ success: false, error: \"Lead ID is required\" });\n      }\n      \n      const result = await emailService.sendCampaignEmail(id, leadId);\n      \n      if (result.success) {\n        res.json({ success: true, messageId: result.messageId, trackingId: result.trackingId });\n      } else {\n        res.status(400).json({ success: false, error: result.error });\n      }\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ success: false, message: \"Failed to send email\" });\n    }\n  });\n\n  app.post('/api/campaigns/:id/schedule-followup', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { delay } = req.body; // delay in seconds\n      \n      const followUpId = await emailService.scheduleFollowUp(id, delay || 86400); // Default 24 hours\n      \n      res.json({ success: true, followUpCampaignId: followUpId });\n    } catch (error) {\n      console.error(\"Error scheduling follow-up:\", error);\n      res.status(500).json({ message: \"Failed to schedule follow-up\" });\n    }\n  });\n\n  // Insights routes\n  app.get('/api/insights', requireAuth, async (req, res) => {\n    try {\n      const type = req.query.type as string;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const insights = await storage.getInsights(type, limit);\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error fetching insights:\", error);\n      res.status(500).json({ message: \"Failed to fetch insights\" });\n    }\n  });\n\n  app.post('/api/insights/generate', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getDashboardStats(userId);\n      \n      const insightContent = await generateInsights({\n        totalLeads: stats.totalLeads,\n        emailsSent: stats.emailsSent,\n        responseRate: stats.responseRate,\n        followupsScheduled: stats.followupsScheduled,\n        timeframe: 'this week'\n      });\n\n      const insight = await storage.createInsight({\n        type: 'weekly',\n        content: insightContent,\n        metrics: stats,\n        createdBy: userId\n      });\n\n      res.json(insight);\n    } catch (error) {\n      console.error(\"Error generating insights:\", error);\n      res.status(500).json({ message: \"Failed to generate insights\" });\n    }\n  });\n\n  // Dashboard statistics routes\n  app.get('/api/dashboard/performance', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const performance = await storage.getPerformanceData(userId);\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching performance data:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26200},"server/storage.ts":{"content":"import {\n  users,\n  leads,\n  emailCampaigns,\n  insights,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Lead,\n  type InsertLead,\n  type EmailCampaign,\n  type InsertEmailCampaign,\n  type Insight,\n  type InsertInsight,\n  type DashboardStats,\n} from \"@shared/schema\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport { db } from \"./db\";\nimport { eq, desc, count, and, gte, sql, lt, isNotNull } from \"drizzle-orm\";\n\nconst PostgresSessionStore = connectPg(session);\n\n// Interface for storage operations\nexport interface IStorage {\n  // Session store\n  sessionStore: session.SessionStore;\n  \n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n  getUserCount(): Promise<number>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Lead operations\n  getLeads(userId: string, limit?: number): Promise<Lead[]>;\n  getLeadById(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead & { createdBy: string }): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead>;\n  deleteLead(id: string): Promise<void>;\n  searchLeads(query: string, userId: string): Promise<Lead[]>;\n  \n  // Email campaign operations\n  getEmailCampaigns(leadId?: string, limit?: number): Promise<EmailCampaign[]>;\n  getEmailCampaignById(id: string): Promise<EmailCampaign | undefined>;\n  getEmailCampaignByTrackingId(trackingId: string): Promise<EmailCampaign | undefined>;\n  createEmailCampaign(campaign: InsertEmailCampaign & { createdBy: string }): Promise<EmailCampaign>;\n  updateEmailCampaign(id: string, campaign: Partial<InsertEmailCampaign>): Promise<EmailCampaign>;\n  getScheduledEmailCampaigns(beforeDate: Date): Promise<EmailCampaign[]>;\n  getRecentEmailReplies(leadId: string, days: number): Promise<EmailCampaign[]>;\n  cancelScheduledFollowUps(leadId: string): Promise<void>;\n  \n  // Insights operations\n  getInsights(type?: string, limit?: number): Promise<Insight[]>;\n  createInsight(insight: InsertInsight & { createdBy: string }): Promise<Insight>;\n  \n  // Dashboard operations\n  getDashboardStats(userId: string): Promise<DashboardStats>;\n  getRecentLeads(userId: string, limit?: number): Promise<Lead[]>;\n  getPerformanceData(userId: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: false \n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getUserCount(): Promise<number> {\n    const [result] = await db.select({ count: count() }).from(users);\n    return result.count;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Lead operations\n  async getLeads(userId: string, limit = 50): Promise<Lead[]> {\n    return await db\n      .select()\n      .from(leads)\n      .where(eq(leads.createdBy, userId))\n      .orderBy(desc(leads.createdAt))\n      .limit(limit);\n  }\n\n  async getLeadById(id: string): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead;\n  }\n\n  async createLead(lead: InsertLead & { createdBy: string }): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values(lead).returning();\n    return newLead;\n  }\n\n  async updateLead(id: string, lead: Partial<InsertLead> & { lastContactDate?: Date }): Promise<Lead> {\n    const [updatedLead] = await db\n      .update(leads)\n      .set({ ...lead, updatedAt: new Date() })\n      .where(eq(leads.id, id))\n      .returning();\n    return updatedLead;\n  }\n\n  async deleteLead(id: string): Promise<void> {\n    await db.delete(leads).where(eq(leads.id, id));\n  }\n\n  async searchLeads(query: string, userId: string): Promise<Lead[]> {\n    return await db\n      .select()\n      .from(leads)\n      .where(\n        and(\n          eq(leads.createdBy, userId),\n          sql`(${leads.name} ILIKE ${`%${query}%`} OR ${leads.company} ILIKE ${`%${query}%`} OR ${leads.email} ILIKE ${`%${query}%`})`\n        )\n      )\n      .orderBy(desc(leads.createdAt));\n  }\n\n  // Email campaign operations\n  async getEmailCampaignByTrackingId(trackingId: string): Promise<EmailCampaign | null> {\n    const [campaign] = await db\n      .select()\n      .from(emailCampaigns)\n      .where(eq(emailCampaigns.trackingId, trackingId));\n    return campaign || null;\n  }\n\n  async getEmailCampaigns(leadId?: string, limit = 50): Promise<EmailCampaign[]> {\n    const query = db.select().from(emailCampaigns);\n    \n    if (leadId) {\n      return await query\n        .where(eq(emailCampaigns.leadId, leadId))\n        .orderBy(desc(emailCampaigns.createdAt))\n        .limit(limit);\n    }\n    \n    return await query\n      .orderBy(desc(emailCampaigns.createdAt))\n      .limit(limit);\n  }\n\n  async getEmailCampaignById(id: string): Promise<EmailCampaign | undefined> {\n    const [campaign] = await db\n      .select()\n      .from(emailCampaigns)\n      .where(eq(emailCampaigns.id, id));\n    return campaign;\n  }\n\n  async createEmailCampaign(campaign: InsertEmailCampaign & { createdBy: string }): Promise<EmailCampaign> {\n    const [newCampaign] = await db\n      .insert(emailCampaigns)\n      .values(campaign)\n      .returning();\n    return newCampaign!;\n  }\n\n  async updateEmailCampaign(id: string, campaign: Partial<InsertEmailCampaign> & { sentAt?: Date; openedAt?: Date; repliedAt?: Date }): Promise<EmailCampaign> {\n    const updateData: any = { ...campaign, updatedAt: new Date() };\n    \n    // Set timestamps based on status\n    if (campaign.status === 'sent' && !updateData.sentAt) {\n      updateData.sentAt = new Date();\n    }\n    if (campaign.status === 'opened' && !updateData.openedAt) {\n      updateData.openedAt = new Date();\n    }\n    if (campaign.status === 'replied' && !updateData.repliedAt) {\n      updateData.repliedAt = new Date();\n    }\n\n    const [updatedCampaign] = await db\n      .update(emailCampaigns)\n      .set(updateData)\n      .where(eq(emailCampaigns.id, id))\n      .returning();\n    return updatedCampaign;\n  }\n\n  // Insights operations\n  async getInsights(type?: string, limit = 10): Promise<Insight[]> {\n    const query = db.select().from(insights);\n    \n    if (type) {\n      return await query\n        .where(eq(insights.type, type))\n        .orderBy(desc(insights.generatedAt))\n        .limit(limit);\n    }\n    \n    return await query\n      .orderBy(desc(insights.generatedAt))\n      .limit(limit);\n  }\n\n  async createInsight(insight: InsertInsight & { createdBy: string }): Promise<Insight> {\n    const [newInsight] = await db.insert(insights).values(insight).returning();\n    return newInsight;\n  }\n\n  // Dashboard operations\n  async getDashboardStats(userId: string): Promise<DashboardStats> {\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    \n    const oneMonthAgo = new Date();\n    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n\n    // Get total leads\n    const [totalLeadsResult] = await db\n      .select({ count: count() })\n      .from(leads)\n      .where(eq(leads.createdBy, userId));\n\n    // Get emails sent\n    const [emailsSentResult] = await db\n      .select({ count: count() })\n      .from(emailCampaigns)\n      .where(eq(emailCampaigns.createdBy, userId));\n\n    // Get replied emails for response rate\n    const [repliedEmailsResult] = await db\n      .select({ count: count() })\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.createdBy, userId),\n          eq(emailCampaigns.status, \"replied\")\n        )\n      );\n\n    // Get follow-ups scheduled\n    const [followupsResult] = await db\n      .select({ count: count() })\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.createdBy, userId),\n          eq(emailCampaigns.isFollowUp, true)\n        )\n      );\n\n    // Get growth metrics (simplified calculation)\n    const [recentLeadsResult] = await db\n      .select({ count: count() })\n      .from(leads)\n      .where(\n        and(\n          eq(leads.createdBy, userId),\n          gte(leads.createdAt, oneWeekAgo)\n        )\n      );\n\n    const [recentEmailsResult] = await db\n      .select({ count: count() })\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.createdBy, userId),\n          gte(emailCampaigns.createdAt, oneWeekAgo)\n        )\n      );\n\n    const totalLeads = totalLeadsResult.count;\n    const emailsSent = emailsSentResult.count;\n    const repliedEmails = repliedEmailsResult.count;\n    const responseRate = emailsSent > 0 ? (repliedEmails / emailsSent) * 100 : 0;\n\n    return {\n      totalLeads,\n      emailsSent,\n      responseRate: parseFloat(responseRate.toFixed(1)),\n      followupsScheduled: followupsResult.count,\n      leadsGrowth: 12, // Simplified - would need more complex calculation\n      emailsGrowth: 18,\n      responseChange: -2,\n      followupsGrowth: 8,\n    };\n  }\n\n  async getRecentLeads(userId: string, limit = 5): Promise<Lead[]> {\n    return await db\n      .select()\n      .from(leads)\n      .where(eq(leads.createdBy, userId))\n      .orderBy(desc(leads.updatedAt))\n      .limit(limit);\n  }\n\n  async getScheduledEmailCampaigns(beforeDate: Date): Promise<EmailCampaign[]> {\n    return await db\n      .select()\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.status, \"draft\"),\n          isNotNull(emailCampaigns.scheduledAt),\n          lt(emailCampaigns.scheduledAt, beforeDate)\n        )\n      )\n      .orderBy(emailCampaigns.scheduledAt);\n  }\n\n  async getRecentEmailReplies(leadId: string, days: number): Promise<EmailCampaign[]> {\n    const sinceDate = new Date();\n    sinceDate.setDate(sinceDate.getDate() - days);\n\n    return await db\n      .select()\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.leadId, leadId),\n          eq(emailCampaigns.status, \"replied\"),\n          gte(emailCampaigns.repliedAt, sinceDate)\n        )\n      );\n  }\n\n  async cancelScheduledFollowUps(leadId: string): Promise<void> {\n    await db\n      .update(emailCampaigns)\n      .set({ \n        status: \"bounced\", // Using bounced as cancelled status\n        updatedAt: new Date() \n      })\n      .where(\n        and(\n          eq(emailCampaigns.leadId, leadId),\n          eq(emailCampaigns.status, \"draft\"),\n          eq(emailCampaigns.isFollowUp, true),\n          isNotNull(emailCampaigns.scheduledAt)\n        )\n      );\n  }\n\n  async getFollowUpCampaignsForLead(leadId: string): Promise<EmailCampaign[]> {\n    return await db\n      .select()\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.leadId, leadId),\n          eq(emailCampaigns.isFollowUp, true)\n        )\n      )\n      .orderBy(emailCampaigns.followUpSequence);\n  }\n\n  async updateFollowUpCampaign(campaignId: string, updates: Partial<EmailCampaign>): Promise<void> {\n    await db\n      .update(emailCampaigns)\n      .set({ \n        ...updates,\n        updatedAt: new Date() \n      })\n      .where(eq(emailCampaigns.id, campaignId));\n  }\n\n  async deleteEmailCampaign(id: string): Promise<void> {\n    await db\n      .delete(emailCampaigns)\n      .where(eq(emailCampaigns.id, id));\n  }\n\n  async getEmailCampaignsByUser(userId: string): Promise<EmailCampaign[]> {\n    return await db\n      .select()\n      .from(emailCampaigns)\n      .where(eq(emailCampaigns.createdBy, userId))\n      .orderBy(desc(emailCampaigns.createdAt));\n  }\n\n  async getFollowUpCampaignsForLead(leadId: string): Promise<EmailCampaign[]> {\n    return await db\n      .select()\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.leadId, leadId),\n          eq(emailCampaigns.isFollowUp, true)\n        )\n      )\n      .orderBy(emailCampaigns.followUpSequence);\n  }\n\n  async getPerformanceData(userId: string): Promise<any> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    // Get emails sent over time\n    const emailsSent = await db\n      .select({\n        date: sql<string>`date(${emailCampaigns.sentAt})`,\n        count: count(),\n      })\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.createdBy, userId),\n          eq(emailCampaigns.status, \"sent\"),\n          gte(emailCampaigns.sentAt, thirtyDaysAgo)\n        )\n      )\n      .groupBy(sql`date(${emailCampaigns.sentAt})`)\n      .orderBy(sql`date(${emailCampaigns.sentAt})`);\n\n    // Get response rates\n    const responseRates = await db\n      .select({\n        date: sql<string>`date(${emailCampaigns.sentAt})`,\n        totalSent: sql<number>`count(*)`,\n        totalReplies: sql<number>`sum(case when ${emailCampaigns.status} = 'replied' then 1 else 0 end)`,\n      })\n      .from(emailCampaigns)\n      .where(\n        and(\n          eq(emailCampaigns.createdBy, userId),\n          gte(emailCampaigns.sentAt, thirtyDaysAgo)\n        )\n      )\n      .groupBy(sql`date(${emailCampaigns.sentAt})`)\n      .orderBy(sql`date(${emailCampaigns.sentAt})`);\n\n    // Calculate response rates\n    const responseRatesData = responseRates.map(row => ({\n      date: row.date,\n      rate: row.totalSent > 0 ? Math.round((row.totalReplies / row.totalSent) * 100) : 0\n    }));\n\n    // Get leads by status\n    const leadsByStatus = await db\n      .select({\n        status: leads.status,\n        count: count(),\n      })\n      .from(leads)\n      .where(eq(leads.createdBy, userId))\n      .groupBy(leads.status);\n\n    const statusColors = {\n      new: \"#3b82f6\",\n      contacted: \"#f59e0b\", \n      replied: \"#8b5cf6\",\n      qualified: \"#10b981\",\n      closed: \"#6b7280\",\n      follow_up_scheduled: \"#ef4444\"\n    };\n\n    const leadsByStatusData = leadsByStatus.map(row => ({\n      status: row.status || 'new',\n      count: row.count,\n      color: statusColors[row.status as keyof typeof statusColors] || statusColors.new\n    }));\n\n    return {\n      emailsSent: emailsSent.map(row => ({\n        date: row.date,\n        count: row.count\n      })),\n      responseRates: responseRatesData,\n      leadsByStatus: leadsByStatusData,\n      monthlyTrends: [] // Placeholder for more complex trends analysis\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15844},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  pgEnum,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"head_admin\", \"admin\", \"founder\", \"strategist\", \"designer\"]);\nexport const leadStatusEnum = pgEnum(\"lead_status\", [\"new\", \"contacted\", \"replied\", \"follow_up_scheduled\", \"qualified\", \"closed\"]);\nexport const emailStatusEnum = pgEnum(\"email_status\", [\"draft\", \"sent\", \"opened\", \"replied\", \"bounced\"]);\nexport const emailToneEnum = pgEnum(\"email_tone\", [\"professional\", \"casual\", \"direct\"]);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default(\"designer\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leads table\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  company: varchar(\"company\").notNull(),\n  role: varchar(\"role\"),\n  notes: text(\"notes\"),\n  status: leadStatusEnum(\"status\").default(\"new\"),\n  lastContactDate: timestamp(\"last_contact_date\"),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email campaigns table\nexport const emailCampaigns = pgTable(\"email_campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  tone: emailToneEnum(\"tone\").notNull(),\n  status: emailStatusEnum(\"status\").default(\"draft\"),\n  sentAt: timestamp(\"sent_at\"),\n  openedAt: timestamp(\"opened_at\"),\n  repliedAt: timestamp(\"replied_at\"),\n  isFollowUp: boolean(\"is_follow_up\").default(false),\n  followUpSequence: integer(\"follow_up_sequence\").default(0),\n  parentEmailId: varchar(\"parent_email_id\"),\n  messageId: varchar(\"message_id\"), // For tracking email responses\n  trackingId: varchar(\"tracking_id\"), // For email open/click tracking\n  scheduledAt: timestamp(\"scheduled_at\"), // For follow-up scheduling\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analytics/Insights table\nexport const insights = pgTable(\"insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\").notNull(), // 'weekly', 'monthly', 'campaign'\n  content: text(\"content\").notNull(),\n  metrics: jsonb(\"metrics\"), // Store relevant metrics as JSON\n  generatedAt: timestamp(\"generated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  leads: many(leads),\n  emailCampaigns: many(emailCampaigns),\n  insights: many(insights),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [leads.createdBy],\n    references: [users.id],\n  }),\n  emailCampaigns: many(emailCampaigns),\n}));\n\nexport const emailCampaignsRelations = relations(emailCampaigns, ({ one, many }) => ({\n  lead: one(leads, {\n    fields: [emailCampaigns.leadId],\n    references: [leads.id],\n  }),\n  createdBy: one(users, {\n    fields: [emailCampaigns.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const insightsRelations = relations(insights, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [insights.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  role: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).pick({\n  name: true,\n  email: true,\n  company: true,\n  role: true,\n  notes: true,\n  status: true,\n});\n\nexport const insertEmailCampaignSchema = createInsertSchema(emailCampaigns).pick({\n  leadId: true,\n  subject: true,\n  content: true,\n  tone: true,\n  status: true,\n  isFollowUp: true,\n  followUpSequence: true,\n  parentEmailId: true,\n  messageId: true,\n  trackingId: true,\n  scheduledAt: true,\n});\n\nexport const insertInsightSchema = createInsertSchema(insights).pick({\n  type: true,\n  content: true,\n  metrics: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema> & { id: string };\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\n\nexport type EmailCampaign = typeof emailCampaigns.$inferSelect;\nexport type InsertEmailCampaign = z.infer<typeof insertEmailCampaignSchema>;\n\nexport type Insight = typeof insights.$inferSelect;\nexport type InsertInsight = z.infer<typeof insertInsightSchema>;\n\n// Dashboard stats type\nexport type DashboardStats = {\n  totalLeads: number;\n  emailsSent: number;\n  responseRate: number;\n  followupsScheduled: number;\n  leadsGrowth: number;\n  emailsGrowth: number;\n  responseChange: number;\n  followupsGrowth: number;\n};\n","size_bytes":6411},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AdminPage from \"@/pages/admin-page\";\nimport SetupPage from \"@/pages/setup-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Leads from \"@/pages/leads\";\nimport Campaigns from \"@/pages/campaigns\";\nimport Analytics from \"@/pages/analytics\";\nimport IntegrationPage from \"@/pages/integration\";\n\nfunction Router() {\n  const { setupNeeded, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (setupNeeded) {\n    return <SetupPage onSetupComplete={() => window.location.reload()} />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/admin\" component={AdminPage} />\n      <ProtectedRoute path=\"/leads\" component={Leads} />\n      <ProtectedRoute path=\"/campaigns\" component={Campaigns} />\n      <ProtectedRoute path=\"/analytics\" component={Analytics} />\n      <ProtectedRoute path=\"/integrations\" component={IntegrationPage} />\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2062},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Modern Color System */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 22% 12%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 22% 12%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 22% 12%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(212 12% 96%);\n  --secondary-foreground: hsl(222 22% 12%);\n  --muted: hsl(212 12% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(212 12% 96%);\n  --accent-foreground: hsl(222 22% 12%);\n  --destructive: hsl(0 72% 51%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(142 70% 45%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(41 97% 55%);\n  --warning-foreground: hsl(222 22% 12%);\n  --border: hsl(212 12% 90%);\n  --input: hsl(212 12% 96%);\n  --ring: hsl(221 83% 53%);\n  \n  /* Chart Colors */\n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(142 70% 45%);\n  --chart-3: hsl(41 97% 55%);\n  --chart-4: hsl(285 85% 52%);\n  --chart-5: hsl(14 90% 53%);\n  \n  /* Modern Design System */\n  --radius: 0.75rem;\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n}\n\n.dark {\n  --background: hsl(222 18% 7%);\n  --foreground: hsl(212 13% 95%);\n  --card: hsl(222 16% 10%);\n  --card-foreground: hsl(212 13% 95%);\n  --popover: hsl(222 16% 10%);\n  --popover-foreground: hsl(212 13% 95%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(222 15% 16%);\n  --secondary-foreground: hsl(212 13% 95%);\n  --muted: hsl(222 15% 16%);\n  --muted-foreground: hsl(215 16% 57%);\n  --accent: hsl(222 15% 16%);\n  --accent-foreground: hsl(212 13% 95%);\n  --destructive: hsl(0 72% 51%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(142 70% 45%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(41 97% 55%);\n  --warning-foreground: hsl(222 22% 12%);\n  --border: hsl(222 15% 16%);\n  --input: hsl(222 15% 16%);\n  --ring: hsl(221 83% 53%);\n  \n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(142 70% 45%);\n  --chart-3: hsl(41 97% 55%);\n  --chart-4: hsl(285 85% 52%);\n  --chart-5: hsl(14 90% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n    line-height: 1.6;\n    letter-spacing: -0.011em;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n    line-height: 1.2;\n  }\n\n  h1 { @apply text-3xl lg:text-4xl; }\n  h2 { @apply text-2xl lg:text-3xl; }\n  h3 { @apply text-xl lg:text-2xl; }\n  h4 { @apply text-lg lg:text-xl; }\n  \n  p {\n    @apply text-muted-foreground leading-relaxed;\n  }\n  \n  /* Smooth scrolling */\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  /* Card hover effects */\n  .card-hover {\n    @apply transition-all duration-200 hover:shadow-md hover:shadow-black/5 hover:-translate-y-0.5;\n  }\n  \n  /* Button variants */\n  .btn-gradient {\n    @apply bg-gradient-to-r from-primary to-primary/90 text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-200;\n  }\n  \n  /* Status badges */\n  .status-new { @apply bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200; }\n  .status-contacted { @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200; }\n  .status-replied { @apply bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200; }\n  .status-qualified { @apply bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-200; }\n  .status-closed { @apply bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-200; }\n  \n  /* Email status badges */\n  .email-draft { @apply bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-200; }\n  .email-sent { @apply bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200; }\n  .email-opened { @apply bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200; }\n  .email-replied { @apply bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-200; }\n  .email-bounced { @apply bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200; }\n  \n  /* Layout improvements */\n  .content-grid {\n    @apply grid gap-6;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  }\n  \n  .stats-grid {\n    @apply grid gap-6;\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n  }\n  \n  /* Loading states */\n  .skeleton {\n    @apply bg-muted animate-pulse rounded-md;\n  }\n  \n  /* Focus states */\n  .focus-ring {\n    @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background;\n  }\n}\n\n@layer utilities {\n  /* Custom utilities */\n  .text-gradient {\n    @apply bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent;\n  }\n  \n  /* Button visibility fixes */\n  .btn-visible {\n    @apply opacity-100 transition-opacity duration-200;\n  }\n  \n  .btn-invisible {\n    @apply opacity-0 pointer-events-none;\n  }\n  \n  /* Spacing utilities */\n  .space-y-8 > * + * { margin-top: 2rem; }\n  .space-y-12 > * + * { margin-top: 3rem; }\n  \n  /* Modern shadows */\n  .shadow-soft {\n    box-shadow: 0 2px 8px 0 rgb(0 0 0 / 0.08), 0 1px 4px 0 rgb(0 0 0 / 0.06);\n  }\n  \n  .shadow-glow {\n    box-shadow: 0 0 0 1px rgb(255 255 255 / 0.05), 0 1px 2px 0 rgb(0 0 0 / 0.1);\n  }\n  \n  /* Custom border radius */\n  .rounded-2xl { border-radius: 1rem; }\n  .rounded-3xl { border-radius: 1.5rem; }\n}\n\n/* Animation keyframes */\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.animate-slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.2s ease-out;\n}\n\n/* Responsive improvements */\n@media (max-width: 768px) {\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n  }\n  \n  .content-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n}","size_bytes":6507},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/csvHandler.ts":{"content":"import { parse } from 'csv-parse/sync';\nimport { stringify } from 'csv-stringify/sync';\nimport type { Lead, InsertLead } from '@shared/schema';\n\nexport interface CSVLead {\n  name: string;\n  email: string;\n  company: string;\n  role?: string;\n  notes?: string;\n}\n\nexport function parseLeadsFromCSV(csvContent: string): CSVLead[] {\n  try {\n    const records = parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      trim: true,\n    });\n\n    return records.map((record: any) => ({\n      name: record.name || record.Name || '',\n      email: record.email || record.Email || '',\n      company: record.company || record.Company || '',\n      role: record.role || record.Role || record.title || record.Title || '',\n      notes: record.notes || record.Notes || '',\n    }));\n  } catch (error) {\n    throw new Error(`Failed to parse CSV: ${error}`);\n  }\n}\n\nexport function validateCSVLeads(leads: CSVLead[]): { valid: CSVLead[]; errors: string[] } {\n  const valid: CSVLead[] = [];\n  const errors: string[] = [];\n\n  leads.forEach((lead, index) => {\n    const rowNumber = index + 1;\n    \n    if (!lead.name?.trim()) {\n      errors.push(`Row ${rowNumber}: Name is required`);\n      return;\n    }\n    \n    if (!lead.email?.trim()) {\n      errors.push(`Row ${rowNumber}: Email is required`);\n      return;\n    }\n    \n    if (!lead.company?.trim()) {\n      errors.push(`Row ${rowNumber}: Company is required`);\n      return;\n    }\n\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(lead.email)) {\n      errors.push(`Row ${rowNumber}: Invalid email format`);\n      return;\n    }\n\n    valid.push(lead);\n  });\n\n  return { valid, errors };\n}\n\nexport function convertLeadsToCSV(leads: Lead[]): string {\n  const csvData = leads.map(lead => ({\n    name: lead.name,\n    email: lead.email,\n    company: lead.company,\n    role: lead.role || '',\n    status: lead.status,\n    notes: lead.notes || '',\n    lastContactDate: lead.lastContactDate?.toISOString().split('T')[0] || '',\n    createdAt: lead.createdAt?.toISOString().split('T')[0] || '',\n  }));\n\n  return stringify(csvData, {\n    header: true,\n    columns: [\n      'name',\n      'email', \n      'company',\n      'role',\n      'status',\n      'notes',\n      'lastContactDate',\n      'createdAt'\n    ]\n  });\n}\n\nexport function getCSVTemplate(): string {\n  const template = [\n    { name: 'John Doe', email: 'john@example.com', company: 'Example Corp', role: 'CEO', notes: 'Interested in design services' },\n  ];\n  \n  return stringify(template, {\n    header: true,\n    columns: ['name', 'email', 'company', 'role', 'notes']\n  });\n}\n","size_bytes":2633},"server/services/emailService.ts":{"content":"import { storage } from \"../storage\";\nimport type { EmailCampaign } from \"@shared/schema\";\nimport { GmailProvider, type GmailConfig } from \"./gmailService\";\nimport { emailTrackingService } from \"./emailTrackingService\";\n\n// Email service interface\nexport interface EmailProvider {\n  sendEmail(params: EmailSendParams): Promise<EmailSendResult>;\n  trackOpen(trackingId: string): Promise<void>;\n  trackClick(trackingId: string, url: string): Promise<void>;\n}\n\nexport interface EmailSendParams {\n  to: string;\n  subject: string;\n  content: string;\n  fromName: string;\n  fromEmail: string;\n  trackingId?: string;\n  leadId?: string;\n  campaignId?: string;\n}\n\nexport interface EmailSendResult {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n  trackingId?: string;\n}\n\n// Mock email provider for development\nclass MockEmailProvider implements EmailProvider {\n  async sendEmail(params: EmailSendParams): Promise<EmailSendResult> {\n    // Simulate email sending delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.log(`[MOCK EMAIL] Sending to: ${params.to}`);\n    console.log(`[MOCK EMAIL] Subject: ${params.subject}`);\n    console.log(`[MOCK EMAIL] From: ${params.fromName} <${params.fromEmail}>`);\n    \n    return {\n      success: true,\n      messageId: `mock_${Date.now()}_${Math.random().toString(36)}`,\n      trackingId: params.trackingId || `track_${Date.now()}`\n    };\n  }\n\n  async trackOpen(trackingId: string): Promise<void> {\n    console.log(`[MOCK EMAIL] Email opened: ${trackingId}`);\n    // Update campaign status in storage layer\n  }\n\n  async trackClick(trackingId: string, url: string): Promise<void> {\n    console.log(`[MOCK EMAIL] Link clicked: ${trackingId} -> ${url}`);\n  }\n}\n\n// Email service class\nexport class EmailService {\n  private provider: EmailProvider;\n\n  constructor(provider?: EmailProvider) {\n    this.provider = provider || this.createProvider();\n  }\n\n  private createProvider(): EmailProvider {\n    // Check if Gmail credentials are available\n    if (process.env.GMAIL_CLIENT_ID && process.env.GMAIL_CLIENT_SECRET && process.env.GMAIL_REFRESH_TOKEN) {\n      return new GmailProvider({\n        clientId: process.env.GMAIL_CLIENT_ID,\n        clientSecret: process.env.GMAIL_CLIENT_SECRET,\n        redirectUri: process.env.GMAIL_REDIRECT_URI || 'http://localhost:5000/api/auth/gmail/callback',\n        refreshToken: process.env.GMAIL_REFRESH_TOKEN,\n        accessToken: process.env.GMAIL_ACCESS_TOKEN,\n      });\n    }\n    \n    // Fall back to mock provider for development\n    return new MockEmailProvider();\n  }\n\n  async sendCampaignEmail(campaignId: string, leadId: string): Promise<EmailSendResult> {\n    const campaign = await storage.getEmailCampaignById(campaignId);\n    const lead = await storage.getLeadById(leadId);\n\n    if (!campaign || !lead) {\n      return {\n        success: false,\n        error: \"Campaign or lead not found\"\n      };\n    }\n\n    const trackingId = `${campaignId}_${Date.now()}`;\n\n    // Add tracking pixels and links to email content\n    const trackedContent = this.addEmailTracking(campaign.content, trackingId);\n\n    const result = await this.provider.sendEmail({\n      to: lead.email,\n      subject: campaign.subject,\n      content: trackedContent,\n      fromName: process.env.FROM_NAME || \"OutreachX Team\",\n      fromEmail: process.env.FROM_EMAIL || \"outreach@yourcompany.com\",\n      trackingId,\n      leadId,\n      campaignId\n    });\n\n    if (result.success) {\n      // Update campaign with tracking info and sent status\n      await storage.updateEmailCampaign(campaignId, {\n        status: \"sent\",\n        messageId: result.messageId,\n        trackingId: result.trackingId,\n      });\n\n      // Update lead last contact date\n      await storage.updateLead(leadId, {\n        lastContactDate: new Date()\n      });\n    }\n\n    return result;\n  }\n\n  addEmailTracking(content: string, trackingId?: string): string {\n    if (!trackingId) return content;\n\n    const baseUrl = process.env.REPLIT_DOMAINS?.split(',')[0] || 'http://localhost:5000';\n    \n    // Add tracking pixel for open tracking\n    const trackingPixel = `<img src=\"${baseUrl}/api/email/track-open/${trackingId}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\n\n    // Add tracking to links\n    const trackedContent = content.replace(\n      /<a\\s+href=\"([^\"]+)\"/g,\n      `<a href=\"${baseUrl}/api/email/track-click/${trackingId}?url=$1\"`\n    );\n\n    return trackedContent + trackingPixel;\n  }\n\n  async handleEmailOpen(trackingId: string): Promise<void> {\n    await emailTrackingService.trackEmailOpen(trackingId);\n  }\n\n  async handleEmailClick(trackingId: string, url: string): Promise<string> {\n    return await emailTrackingService.trackEmailClick(trackingId, url);\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":4781},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY || \"\"\n});\n\nexport interface EmailGenerationRequest {\n  name: string;\n  role: string;\n  company: string;\n  tone: 'professional' | 'casual' | 'direct';\n  isFollowUp?: boolean;\n  previousEmailContent?: string;\n}\n\nexport interface EmailGenerationResponse {\n  subject: string;\n  content: string;\n}\n\nexport async function generateColdEmail(request: EmailGenerationRequest): Promise<EmailGenerationResponse> {\n  const { name, role, company, tone } = request;\n\n  const prompt = `Write a cold outreach email to ${name}, who is a ${role} at ${company}. \nTone: ${tone}. The sender is a UI/UX and branding design studio. \nMake it short, personalized, and with a clear call-to-action to book a call.\n\nFormat the response as JSON with 'subject' and 'content' fields.`;\n\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            subject: { type: \"string\" },\n            content: { type: \"string\" },\n          },\n          required: [\"subject\", \"content\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data: EmailGenerationResponse = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from Gemini\");\n    }\n  } catch (error) {\n    throw new Error(`Failed to generate email: ${error}`);\n  }\n}\n\nexport async function generateFollowUpEmail({\n  name,\n  role,\n  company,\n  tone,\n  isFollowUp = false,\n  previousEmailContent,\n  followUpSequence = 1,\n}: {\n  name: string;\n  role: string;\n  company: string;\n  tone: string;\n  isFollowUp?: boolean;\n  previousEmailContent?: string;\n  followUpSequence?: number;\n}): Promise<EmailGenerationResponse> {\n  const sequenceContext = {\n    1: \"This is the first follow-up. Gently remind them of your previous email and add additional value or a different angle.\",\n    2: \"This is the second follow-up. Be more direct but still professional. Mention that you've reached out before and provide a clear reason to respond.\",\n    3: \"This is the final follow-up. Be respectful but direct. Mention this is your last attempt and provide a compelling reason to connect.\"\n  };\n\n  const sequenceGuidance = sequenceContext[followUpSequence as keyof typeof sequenceContext] || sequenceContext[1];\n\n  const prompt = `Generate a ${tone} follow-up email for ${name}, a ${role} at ${company}.\nThis is follow-up #${followUpSequence} to the previous email content:\n${previousEmailContent}\n\n${sequenceGuidance}\n\nThe follow-up should:\n- Reference the previous communication naturally\n- Add value or a new angle appropriate for follow-up #${followUpSequence}\n- Be persistent but not pushy\n- Keep the same ${tone} tone\n- Be concise and compelling\n- Include a clear call-to-action\n\nReturn as JSON with \"subject\" and \"content\" fields.`;\n\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            subject: { type: \"string\" },\n            content: { type: \"string\" },\n          },\n          required: [\"subject\", \"content\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data: EmailGenerationResponse = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from Gemini\");\n    }\n  } catch (error) {\n    throw new Error(`Failed to generate follow-up email: ${error}`);\n  }\n}\n\nexport interface InsightRequest {\n  totalLeads: number;\n  emailsSent: number;\n  responseRate: number;\n  followupsScheduled: number;\n  timeframe: string;\n}\n\nexport async function generateInsights(data: InsightRequest): Promise<string> {\n  const prompt = `Based on this outreach data: ${JSON.stringify(data)}, summarize trends in 3 sentences or less. \nMention reply rate, follow-up effectiveness, and any improvement suggestions.`;\n\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Unable to generate insights at this time.\";\n  } catch (error) {\n    throw new Error(`Failed to generate insights: ${error}`);\n  }\n}","size_bytes":4530},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport PerformanceChart from \"@/components/dashboard/performance-chart\";\nimport type { DashboardStats } from \"@shared/schema\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: !!user,\n  });\n\n  const { data: insights, isLoading: insightsLoading } = useQuery({\n    queryKey: [\"/api/insights\"],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary-500 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-chart-bar text-white text-2xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-gray-600\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Analytics\"\n          subtitle=\"Analyze your outreach performance and get AI-powered insights.\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Key Metrics Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-600 text-sm font-medium\">Open Rate</p>\n                    <p className=\"text-3xl font-bold text-gray-900 mt-1\">67.5%</p>\n                    <p className=\"text-green-600 text-sm mt-1\">\n                      <i className=\"fas fa-arrow-up mr-1\"></i>\n                      +5.2% vs last month\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-envelope-open text-blue-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-600 text-sm font-medium\">Response Rate</p>\n                    <p className=\"text-3xl font-bold text-gray-900 mt-1\">\n                      {stats ? `${stats.responseRate}%` : '24.3%'}\n                    </p>\n                    <p className=\"text-yellow-600 text-sm mt-1\">\n                      <i className=\"fas fa-minus mr-1\"></i>\n                      {stats ? `${stats.responseChange}%` : '-2%'} vs last week\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-reply text-yellow-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-600 text-sm font-medium\">Conversion Rate</p>\n                    <p className=\"text-3xl font-bold text-gray-900 mt-1\">8.7%</p>\n                    <p className=\"text-green-600 text-sm mt-1\">\n                      <i className=\"fas fa-arrow-up mr-1\"></i>\n                      +1.3% vs last month\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-handshake text-green-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-600 text-sm font-medium\">Avg. Follow-ups</p>\n                    <p className=\"text-3xl font-bold text-gray-900 mt-1\">2.3</p>\n                    <p className=\"text-blue-600 text-sm mt-1\">\n                      <i className=\"fas fa-arrow-up mr-1\"></i>\n                      +0.4 vs last month\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-redo text-purple-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Chart */}\n          <PerformanceChart />\n\n          {/* AI Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-brain mr-3 text-secondary-500\"></i>\n                AI-Generated Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {insightsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Generating insights...</p>\n                </div>\n              ) : insights && Array.isArray(insights) && insights.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {insights.map((insight: any) => (\n                    <div key={insight.id} className=\"p-4 bg-gradient-to-r from-secondary-50 to-purple-50 rounded-lg border border-secondary-200\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <p className=\"text-gray-800 mb-2\">{insight.content}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            Generated {new Date(insight.generatedAt).toLocaleString()}\n                          </p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-secondary-600 border-secondary-300\">\n                          {insight.type}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-brain text-gray-400 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No insights available</h3>\n                  <p className=\"text-gray-500\">\n                    AI insights will be generated as you accumulate more outreach data.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Best Performing Campaigns */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Best Performing Campaigns</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg border border-green-200\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Professional tone outreach</h4>\n                    <p className=\"text-sm text-gray-600\">45% response rate • 156 emails sent</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-green-600\">45%</p>\n                    <p className=\"text-xs text-green-600\">Response Rate</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Follow-up sequence #2</h4>\n                    <p className=\"text-sm text-gray-600\">38% response rate • 89 emails sent</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-blue-600\">38%</p>\n                    <p className=\"text-xs text-blue-600\">Response Rate</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Direct tone outreach</h4>\n                    <p className=\"text-sm text-gray-600\">32% response rate • 203 emails sent</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-yellow-600\">32%</p>\n                    <p className=\"text-xs text-yellow-600\">Response Rate</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9705},"client/src/pages/campaigns.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport AIEmailGenerator from \"@/components/email/ai-email-generator\";\nimport FollowUpScheduler from \"@/components/email/follow-up-scheduler\";\nimport EmailTracker from \"@/components/email/email-tracker\";\nimport { Search, Filter, Plus, Trash2, Edit, Send, Clock, Eye, MoreHorizontal, Mail } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { EmailCampaign, Lead } from \"@shared/schema\";\n\nexport default function Campaigns() {\n  const [showEmailGenerator, setShowEmailGenerator] = useState(false);\n  const [selectedLeads, setSelectedLeads] = useState<Lead[]>([]);\n  const [showFollowUpScheduler, setShowFollowUpScheduler] = useState(false);\n  const [selectedCampaignForSchedule, setSelectedCampaignForSchedule] = useState<EmailCampaign | null>(null);\n  const [selectedCampaigns, setSelectedCampaigns] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [showLeadSelector, setShowLeadSelector] = useState(false);\n  const [editingCampaign, setEditingCampaign] = useState<EmailCampaign | null>(null);\n\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery<EmailCampaign[]>({\n    queryKey: [\"/api/campaigns\"],\n    enabled: !!user,\n  });\n\n  const { data: leads } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n    enabled: !!user,\n  });\n\n  // Delete campaign mutation\n  const deleteCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({ title: \"Campaign deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete campaign\", variant: \"destructive\" });\n    },\n  });\n\n  // Send campaign mutation\n  const sendCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/send`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({ title: \"Campaign sent successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to send campaign\", variant: \"destructive\" });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return \"bg-gray-100 text-gray-800\";\n      case \"sent\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"opened\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"replied\":\n        return \"bg-green-100 text-green-800\";\n      case \"bounced\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.charAt(0).toUpperCase() + status.slice(1);\n  };\n\n  // Filter campaigns based on search and status\n  const filteredCampaigns = campaigns?.filter((campaign) => {\n    const matchesSearch = campaign.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         campaign.content.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || campaign.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  // Handle campaign selection\n  const handleCampaignSelect = (campaignId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedCampaigns([...selectedCampaigns, campaignId]);\n    } else {\n      setSelectedCampaigns(selectedCampaigns.filter(id => id !== campaignId));\n    }\n  };\n\n  // Handle select all campaigns\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedCampaigns(filteredCampaigns.map(c => c.id));\n    } else {\n      setSelectedCampaigns([]);\n    }\n  };\n\n  // Handle bulk delete\n  const handleBulkDelete = () => {\n    selectedCampaigns.forEach(id => {\n      deleteCampaignMutation.mutate(id);\n    });\n    setSelectedCampaigns([]);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <Mail className=\"h-8 w-8 text-primary-foreground animate-pulse\" />\n          </div>\n          <p className=\"text-gray-600\">Loading campaigns...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Email Campaigns\"\n          subtitle=\"Manage your email outreach campaigns and track performance.\"\n        />\n\n        <div className=\"p-6\">\n          {/* Action Bar */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Campaign Management</h3>\n              {selectedCampaigns.length > 0 && (\n                <Badge variant=\"secondary\">\n                  {selectedCampaigns.length} selected\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowLeadSelector(true)}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-select-leads\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Send to Multiple Leads</span>\n              </Button>\n              <Button\n                onClick={() => setShowEmailGenerator(true)}\n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground flex items-center space-x-2\"\n                data-testid=\"button-generate-email\"\n              >\n                <Mail className=\"h-4 w-4\" />\n                <span>Generate AI Email</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters and Search */}\n          <div className=\"bg-white rounded-lg border p-4 mb-6\">\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div className=\"flex items-center space-x-4 flex-1\">\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search campaigns...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-campaigns\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"sent\">Sent</SelectItem>\n                    <SelectItem value=\"opened\">Opened</SelectItem>\n                    <SelectItem value=\"replied\">Replied</SelectItem>\n                    <SelectItem value=\"bounced\">Bounced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {selectedCampaigns.length > 0 && (\n                <div className=\"flex items-center space-x-2\">\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\" size=\"sm\" data-testid=\"button-bulk-delete\">\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete Selected\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Campaigns</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete {selectedCampaigns.length} selected campaign(s)? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleBulkDelete}>Delete</AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Email Tracking Dashboard */}\n          <EmailTracker />\n\n          {/* Campaigns Grid */}\n          {campaignsLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading campaigns...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredCampaigns.length > 0 && (\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Checkbox\n                    checked={selectedCampaigns.length === filteredCampaigns.length}\n                    onCheckedChange={handleSelectAll}\n                    data-testid=\"checkbox-select-all\"\n                  />\n                  <span className=\"text-sm text-gray-600\">Select all</span>\n                </div>\n              )}\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredCampaigns.map((campaign: EmailCampaign) => (\n                  <Card key={campaign.id} className=\"hover:shadow-lg transition-shadow relative\">\n                    <div className=\"absolute top-4 left-4 z-10\">\n                      <Checkbox\n                        checked={selectedCampaigns.includes(campaign.id)}\n                        onCheckedChange={(checked) => handleCampaignSelect(campaign.id, !!checked)}\n                        data-testid={`checkbox-campaign-${campaign.id}`}\n                      />\n                    </div>\n                    \n                    <CardHeader className=\"pb-3 pt-12\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg font-medium text-gray-900 line-clamp-1\">\n                            {campaign.subject}\n                          </CardTitle>\n                          <div className=\"flex items-center mt-2\">\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {formatStatus(campaign.status)}\n                            </Badge>\n                            {campaign.isFollowUp && (\n                              <Badge variant=\"outline\" className=\"ml-2\">\n                                Follow-up #{campaign.followUpSequence}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"text-sm text-gray-600 line-clamp-3\">\n                          {campaign.content.substring(0, 150)}...\n                        </div>\n\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>\n                            {campaign.tone.charAt(0).toUpperCase() + campaign.tone.slice(1)} tone\n                          </span>\n                          <span>\n                            {campaign.createdAt \n                              ? new Date(campaign.createdAt).toLocaleDateString()\n                              : \"\"\n                            }\n                          </span>\n                        </div>\n\n                        {campaign.sentAt && (\n                          <div className=\"text-xs text-gray-500\">\n                            Sent: {new Date(campaign.sentAt).toLocaleString()}\n                          </div>\n                        )}\n\n                        {campaign.openedAt && (\n                          <div className=\"text-xs text-green-600\">\n                            Opened: {new Date(campaign.openedAt).toLocaleString()}\n                          </div>\n                        )}\n\n                        {campaign.repliedAt && (\n                          <div className=\"text-xs text-blue-600\">\n                            Replied: {new Date(campaign.repliedAt).toLocaleString()}\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${campaign.id}`}>\n                            <Eye className=\"h-3 w-3 mr-1\" />\n                            View\n                          </Button>\n                          \n                          {campaign.status === 'draft' ? (\n                            <div className=\"flex space-x-1\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setEditingCampaign(campaign)}\n                                data-testid={`button-edit-${campaign.id}`}\n                              >\n                                <Edit className=\"h-3 w-3 mr-1\" />\n                                Edit\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => sendCampaignMutation.mutate(campaign.id)}\n                                data-testid={`button-send-${campaign.id}`}\n                              >\n                                <Send className=\"h-3 w-3 mr-1\" />\n                                Send\n                              </Button>\n                            </div>\n                          ) : (\n                            <>\n                              {campaign.status === 'sent' && !campaign.isFollowUp && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setSelectedCampaignForSchedule(campaign);\n                                    setShowFollowUpScheduler(true);\n                                  }}\n                                  data-testid={`button-schedule-${campaign.id}`}\n                                >\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  Follow-up\n                                </Button>\n                              )}\n                            </>\n                          )}\n                          \n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-delete-${campaign.id}`}>\n                                <Trash2 className=\"h-3 w-3 mr-1\" />\n                                Delete\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Campaign</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete \"{campaign.subject}\"? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => deleteCampaignMutation.mutate(campaign.id)}>\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {filteredCampaigns.length === 0 && !campaignsLoading && (\n                <div className=\"text-center py-12\">\n                  <Mail className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    {searchTerm || statusFilter !== \"all\" ? \"No campaigns match your filters\" : \"No campaigns yet\"}\n                  </h3>\n                  <p className=\"text-gray-500 mb-4\">\n                    {searchTerm || statusFilter !== \"all\" \n                      ? \"Try adjusting your search or filter criteria\" \n                      : \"Get started by creating your first AI-powered email campaign\"\n                    }\n                  </p>\n                  {!searchTerm && statusFilter === \"all\" && (\n                    <Button\n                      onClick={() => setShowEmailGenerator(true)}\n                      className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                    >\n                      <Mail className=\"h-4 w-4 mr-2\" />\n                      Create Your First Campaign\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Lead Selector Modal */}\n        {showLeadSelector && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[70vh] overflow-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-semibold\">Select Leads for Email Campaign</h2>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setShowLeadSelector(false)}\n                    data-testid=\"button-close-lead-selector\"\n                  >\n                    ×\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"border rounded-lg p-4 max-h-60 overflow-y-auto\">\n                    {leads && leads.length > 0 ? (\n                      <div className=\"space-y-2\">\n                        {leads.map((lead) => (\n                          <div key={lead.id} className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 rounded\">\n                            <Checkbox\n                              checked={selectedLeads.some(l => l.id === lead.id)}\n                              onCheckedChange={(checked) => {\n                                if (checked) {\n                                  setSelectedLeads([...selectedLeads, lead]);\n                                } else {\n                                  setSelectedLeads(selectedLeads.filter(l => l.id !== lead.id));\n                                }\n                              }}\n                              data-testid={`checkbox-lead-${lead.id}`}\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium\">{lead.name}</div>\n                              <div className=\"text-sm text-gray-500\">{lead.company} • {lead.email}</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-500\">No leads available. Add some leads first.</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-sm text-gray-600\">\n                      {selectedLeads.length} lead(s) selected\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"outline\" onClick={() => setShowLeadSelector(false)}>\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          setShowLeadSelector(false);\n                          setShowEmailGenerator(true);\n                        }}\n                        disabled={selectedLeads.length === 0}\n                        data-testid=\"button-continue-to-generator\"\n                      >\n                        Continue to Email Generator\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* AI Email Generator Modal */}\n        {showEmailGenerator && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-semibold\">Generate AI Email Campaign</h2>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setShowEmailGenerator(false)}\n                    data-testid=\"button-close-email-generator\"\n                  >\n                    ×\n                  </Button>\n                </div>\n                <AIEmailGenerator\n                  leads={selectedLeads}\n                  onSuccess={() => {\n                    setShowEmailGenerator(false);\n                    setSelectedLeads([]);\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {showFollowUpScheduler && selectedCampaignForSchedule && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-semibold\">Follow-up Campaign Manager</h2>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setShowFollowUpScheduler(false);\n                      setSelectedCampaignForSchedule(null);\n                    }}\n                    data-testid=\"button-close-follow-up\"\n                  >\n                    ×\n                  </Button>\n                </div>\n                <FollowUpScheduler\n                  campaignId={selectedCampaignForSchedule.id}\n                  leadName={selectedCampaignForSchedule.lead?.name || 'Lead'}\n                  leadCompany={selectedCampaignForSchedule.lead?.company || 'Company'}\n                  leadRole={selectedCampaignForSchedule.lead?.role || 'Decision Maker'}\n                  originalTone={selectedCampaignForSchedule.tone || 'professional'}\n                  onSuccess={() => {\n                    setShowFollowUpScheduler(false);\n                    setSelectedCampaignForSchedule(null);\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":25372},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, Suspense } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport AIInsights from \"@/components/dashboard/ai-insights\";\nimport RecentLeads from \"@/components/dashboard/recent-leads\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport PerformanceChart from \"@/components/dashboard/performance-chart\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingUp, Loader2 } from \"lucide-react\";\n\nfunction LoadingSkeleton() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto animate-pulse\">\n          <TrendingUp className=\"h-8 w-8 text-primary\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Loader2 className=\"h-4 w-4 animate-spin mx-auto text-muted-foreground\" />\n          <p className=\"text-sm text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction DashboardSkeleton() {\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Dashboard\"\n          subtitle=\"Welcome back! Here's your outreach overview.\"\n        />\n        \n        <div className=\"p-8 space-y-8\">\n          {/* Stats skeleton */}\n          <div className=\"stats-grid\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-card rounded-xl border p-6\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* AI Insights skeleton */}\n          <div className=\"bg-card rounded-xl border p-6\">\n            <Skeleton className=\"h-6 w-32 mb-4\" />\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2\" />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  // Dashboard is now protected by ProtectedRoute, so user should always exist\n  if (!user) {\n    return <LoadingSkeleton />;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Dashboard\"\n          subtitle=\"Welcome back! Here's your outreach overview.\"\n        />\n        \n        <div className=\"p-8 space-y-8 max-w-7xl mx-auto\">\n          <Suspense fallback={<DashboardSkeleton />}>\n            <StatsCards />\n            <AIInsights />\n            \n            <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-8\">\n              <div className=\"xl:col-span-2\">\n                <RecentLeads />\n              </div>\n              <div>\n                <QuickActions />\n              </div>\n            </div>\n            \n            <PerformanceChart />\n          </Suspense>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3536},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          {/* Hero Section */}\n          <div className=\"mb-16\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"w-16 h-16 bg-primary-500 rounded-2xl flex items-center justify-center\">\n                <i className=\"fas fa-rocket text-white text-2xl\"></i>\n              </div>\n            </div>\n            <h1 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              OutreachX\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-2\">\n              AI-Powered Lead & Outreach Dashboard\n            </p>\n            <p className=\"text-lg text-gray-500 mb-8\">\n              Automate your design studio's lead outreach with intelligent email generation and comprehensive analytics\n            </p>\n            \n            <Button \n              onClick={() => window.location.href = '/auth'}\n              size=\"lg\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90 px-8 py-3 text-lg font-medium shadow-lg\"\n            >\n              Get Started\n            </Button>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-users text-blue-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  Lead Management\n                </h3>\n                <p className=\"text-gray-600\">\n                  Organize and track your leads with powerful search, filtering, and CSV import/export capabilities.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-robot text-purple-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  AI Email Generation\n                </h3>\n                <p className=\"text-gray-600\">\n                  Generate personalized cold emails and follow-up sequences using Google Gemini AI with customizable tones.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-bar text-green-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  Analytics & Insights\n                </h3>\n                <p className=\"text-gray-600\">\n                  Track email performance, response rates, and get AI-powered insights to optimize your outreach strategy.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-envelope text-yellow-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  Email Integration\n                </h3>\n                <p className=\"text-gray-600\">\n                  Connect with Gmail and Outlook to send emails directly from the dashboard with status tracking.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-clock text-red-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  Follow-up Automation\n                </h3>\n                <p className=\"text-gray-600\">\n                  Schedule up to 3 follow-up emails per lead with intelligent sequencing and automatic reply detection.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-users-cog text-indigo-600\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  Team Collaboration\n                </h3>\n                <p className=\"text-gray-600\">\n                  Role-based access for founders, strategists, and designers with collaborative lead management.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* CTA Section */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-r from-primary-500 to-secondary-500 text-white\">\n            <CardContent className=\"p-12 text-center\">\n              <h2 className=\"text-3xl font-bold mb-4\">\n                Ready to Transform Your Outreach?\n              </h2>\n              <p className=\"text-xl text-white/90 mb-8\">\n                Join design studios already using OutreachX to generate more leads and close more deals.\n              </p>\n              <Button \n                onClick={() => window.location.href = '/auth'}\n                size=\"lg\"\n                className=\"bg-white text-primary-700 hover:bg-gray-50 px-8 py-3 text-lg font-medium\"\n              >\n                Start Free Trial\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6529},"client/src/pages/leads.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport LeadForm from \"@/components/leads/lead-form\";\nimport CSVImport from \"@/components/leads/csv-import\";\nimport { Edit, Trash2, Search, Plus, Upload, Download } from \"lucide-react\";\nimport type { Lead } from \"@shared/schema\";\n\nexport default function Leads() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showLeadForm, setShowLeadForm] = useState(false);\n  const [showCSVImport, setShowCSVImport] = useState(false);\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  \n  const { toast } = useToast();\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: leads, isLoading: leadsLoading } = useQuery({\n    queryKey: [\"/api/leads\", searchQuery],\n    enabled: !!user,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      await apiRequest(\"DELETE\", `/api/leads/${leadId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch(\"/api/leads/export\", {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Export failed\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"leads.csv\";\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"Leads exported successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export leads\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"contacted\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"replied\":\n        return \"bg-green-100 text-green-800\";\n      case \"follow_up_scheduled\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"qualified\":\n        return \"bg-emerald-100 text-emerald-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"h-8 w-8 text-white animate-pulse\" />\n          </div>\n          <p className=\"text-gray-600\">Loading leads...</p>\n        </div>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Leads\"\n          subtitle=\"Manage your lead database and track outreach progress.\"\n        />\n        \n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Actions Bar */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Input\n                    placeholder=\"Search leads...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-64\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowCSVImport(true)}\n                    data-testid=\"button-import-csv\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import CSV\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleExport}\n                    data-testid=\"button-export-csv\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export CSV\n                  </Button>\n                  <Button\n                    onClick={() => setShowLeadForm(true)}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    data-testid=\"button-add-lead\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Lead\n                  </Button>\n                </div>\n              </div>\n\n              {/* Leads Table */}\n              {leadsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Loading leads...</p>\n                </div>\n              ) : leads && leads.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Lead</TableHead>\n                      <TableHead>Company</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Last Contact</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {leads.map((lead: Lead) => (\n                      <TableRow key={lead.id}>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center\">\n                              <span className=\"text-white text-xs font-medium\">\n                                {lead.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                              </span>\n                            </div>\n                            <div className=\"ml-3\">\n                              <p className=\"text-sm font-medium text-gray-900\">{lead.name}</p>\n                              <p className=\"text-xs text-gray-500\">{lead.role || 'Contact'}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"text-sm text-gray-900\">{lead.company}</p>\n                          <p className=\"text-xs text-gray-500\">{lead.email}</p>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(lead.status)}>\n                            {formatStatus(lead.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {lead.lastContactDate \n                            ? new Date(lead.lastContactDate).toLocaleDateString()\n                            : \"Never\"\n                          }\n                        </TableCell>\n                        <TableCell className=\"p-4 align-middle [&:has([role=checkbox])]:pr-0 bg-[#b8484800]\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n                              onClick={() => {\n                                setSelectedLead(lead);\n                                setShowLeadForm(true);\n                              }}\n                              data-testid={`button-edit-${lead.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 text-gray-600\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0 hover:bg-red-100\"\n                              onClick={() => deleteMutation.mutate(lead.id)}\n                              disabled={deleteMutation.isPending}\n                              data-testid={`button-delete-${lead.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-600\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Search className=\"h-8 w-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No leads found</h3>\n                  <p className=\"text-gray-500 mb-4\">\n                    {searchQuery \n                      ? \"No leads match your search criteria.\"\n                      : \"Get started by adding your first lead or importing from CSV.\"\n                    }\n                  </p>\n                  {!searchQuery && (\n                    <Button\n                      onClick={() => setShowLeadForm(true)}\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                      data-testid=\"button-add-first-lead\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Your First Lead\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lead Form Modal */}\n        {showLeadForm && (\n          <LeadForm\n            lead={selectedLead}\n            onClose={() => {\n              setShowLeadForm(false);\n              setSelectedLead(null);\n            }}\n            onSuccess={() => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n              setShowLeadForm(false);\n              setSelectedLead(null);\n            }}\n          />\n        )}\n\n        {/* CSV Import Modal */}\n        {showCSVImport && (\n          <CSVImport\n            onClose={() => setShowCSVImport(false)}\n            onSuccess={() => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n              setShowCSVImport(false);\n            }}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":11854},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface DashboardStats {\n  totalLeads: number;\n  emailsSent: number;\n  responseRate: number;\n  followupsScheduled: number;\n  leadsGrowth: number;\n  emailsGrowth: number;\n  responseChange: number;\n  followupsGrowth: number;\n}\n\nexport interface EmailGenerationRequest {\n  leadId: string;\n  tone: 'professional' | 'casual' | 'direct';\n  isFollowUp?: boolean;\n  parentEmailId?: string;\n}\n\nexport interface EmailGenerationResponse {\n  subject: string;\n  content: string;\n}\n\nexport interface CSVImportResult {\n  message: string;\n  leads?: any[];\n  errors?: string[];\n}\n","size_bytes":572},"client/src/components/dashboard/ai-insights.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Brain, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  Lightbulb,\n  Target,\n  Clock,\n  Users,\n  RefreshCw\n} from \"lucide-react\";\n\ninterface AIInsight {\n  id: string;\n  type: \"trend\" | \"recommendation\" | \"alert\" | \"optimization\";\n  title: string;\n  description: string;\n  impact: \"high\" | \"medium\" | \"low\";\n  confidence: number;\n  action?: string;\n  createdAt: string;\n}\n\nconst insightIcons = {\n  trend: TrendingUp,\n  recommendation: Lightbulb,\n  alert: AlertTriangle,\n  optimization: Target\n};\n\nconst impactColors = {\n  high: \"bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200\",\n  medium: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200\",\n  low: \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200\"\n};\n\nfunction InsightCard({ insight }: { insight: AIInsight }) {\n  const Icon = insightIcons[insight.type];\n\n  return (\n    <div className=\"p-4 rounded-lg border bg-card/50 hover:bg-card transition-colors\">\n      <div className=\"flex items-start space-x-3\">\n        <div className=\"p-2 rounded-lg bg-primary/10\">\n          <Icon className=\"h-4 w-4 text-primary\" />\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <h4 className=\"font-medium text-sm\">{insight.title}</h4>\n            <Badge variant=\"secondary\" className={`text-xs px-1.5 py-0.5 ${impactColors[insight.impact]}`}>\n              {insight.impact}\n            </Badge>\n          </div>\n\n          <p className=\"text-sm text-muted-foreground mb-2 leading-relaxed\">\n            {insight.description}\n          </p>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <Brain className=\"h-3 w-3\" />\n                <span>{insight.confidence}% confident</span>\n              </div>\n              <span>•</span>\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{new Date(insight.createdAt).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            {insight.action && (\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"h-7 text-xs\"\n                data-testid={`button-insight-action-${insight.id}`}\n              >\n                {insight.action}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AIInsightsSkeleton() {\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Skeleton className=\"h-5 w-32\" />\n            <Skeleton className=\"h-4 w-48\" />\n          </div>\n          <Skeleton className=\"h-8 w-8 rounded\" />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <div key={i} className=\"p-4 rounded-lg border\">\n            <div className=\"flex items-start space-x-3\">\n              <Skeleton className=\"h-8 w-8 rounded-lg\" />\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-5 w-12 rounded-full\" />\n                </div>\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n                <div className=\"flex justify-between\">\n                  <Skeleton className=\"h-3 w-24\" />\n                  <Skeleton className=\"h-6 w-16 rounded\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function AIInsights() {\n  const { data: insights, isLoading, error, refetch, isRefetching } = useQuery<AIInsight[]>({\n    queryKey: [\"/api/insights\"],\n    refetchInterval: 60000, // Refetch every minute\n    staleTime: 30000, // Consider data stale after 30 seconds\n  });\n\n  if (isLoading) {\n    return <AIInsightsSkeleton />;\n  }\n\n  if (error || !insights) {\n    return (\n      <Card className=\"border-destructive/50\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Brain className=\"h-5 w-5 text-destructive\" />\n                <span>AI Insights</span>\n              </CardTitle>\n              <CardDescription>\n                Unable to load AI insights\n              </CardDescription>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => refetch()}\n              data-testid=\"button-retry-insights\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertTriangle className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Failed to generate AI insights. Check your API configuration.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!insights.length) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Brain className=\"h-5 w-5 text-primary\" />\n                <span>AI Insights</span>\n              </CardTitle>\n              <CardDescription>\n                AI-powered recommendations for your outreach\n              </CardDescription>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => refetch()}\n              disabled={isRefetching}\n              data-testid=\"button-refresh-insights\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isRefetching ? 'animate-spin' : ''}`} />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <div className=\"p-3 rounded-full bg-muted/50 w-fit mx-auto mb-4\">\n              <Users className=\"h-6 w-6 text-muted-foreground\" />\n            </div>\n            <h3 className=\"font-medium mb-2\">No insights yet</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Add more leads and send some emails to get AI-powered insights and recommendations.\n            </p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => refetch()}\n              disabled={isRefetching}\n              data-testid=\"button-generate-insights\"\n            >\n              Generate Insights\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"card-hover\" data-testid=\"ai-insights-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Brain className=\"h-5 w-5 text-primary\" />\n              <span>AI Insights</span>\n              <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0.5\">\n                {insights.length} insights\n              </Badge>\n            </CardTitle>\n            <CardDescription>\n              AI-powered recommendations for your outreach campaigns\n            </CardDescription>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => refetch()}\n            disabled={isRefetching}\n            data-testid=\"button-refresh-insights\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isRefetching ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {insights.map((insight) => (\n          <InsightCard key={insight.id} insight={insight} />\n        ))}\n\n        {insights.length > 3 && (\n          <div className=\"pt-2 border-t\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full\"\n              data-testid=\"button-view-all-insights\"\n            >\n              View all insights ({insights.length})\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8912},"client/src/components/dashboard/performance-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  BarChart3, \n  TrendingUp, \n  Calendar,\n  RefreshCw\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from \"recharts\";\nimport { useState } from \"react\";\n\ninterface PerformanceData {\n  emailsSent: Array<{ date: string; count: number; }>;\n  responseRates: Array<{ date: string; rate: number; }>;\n  leadsByStatus: Array<{ status: string; count: number; color: string; }>;\n  monthlyTrends: Array<{ month: string; leads: number; emails: number; responses: number; }>;\n}\n\nconst CHART_COLORS = {\n  primary: \"hsl(var(--primary))\",\n  success: \"hsl(var(--success))\",\n  warning: \"hsl(var(--warning))\",\n  destructive: \"hsl(var(--destructive))\",\n  muted: \"hsl(var(--muted-foreground))\"\n};\n\nfunction EmailTrendsChart({ data }: { data: PerformanceData[\"emailsSent\"] }) {\n  if (!data.length) return null;\n\n  return (\n    <div className=\"h-64 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"date\" \n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          />\n          <YAxis tick={{ fontSize: 12 }} />\n          <Tooltip \n            labelFormatter={(value) => new Date(value).toLocaleDateString()}\n            formatter={(value: number) => [value, \"Emails Sent\"]}\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\"\n            }}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"count\" \n            stroke={CHART_COLORS.primary}\n            strokeWidth={2}\n            dot={{ fill: CHART_COLORS.primary, strokeWidth: 2, r: 4 }}\n            activeDot={{ r: 6, stroke: CHART_COLORS.primary, strokeWidth: 2 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nfunction ResponseRateChart({ data }: { data: PerformanceData[\"responseRates\"] }) {\n  if (!data.length) return null;\n\n  return (\n    <div className=\"h-64 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"date\" \n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          />\n          <YAxis tick={{ fontSize: 12 }} tickFormatter={(value) => `${value}%`} />\n          <Tooltip \n            labelFormatter={(value) => new Date(value).toLocaleDateString()}\n            formatter={(value: number) => [`${value}%`, \"Response Rate\"]}\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\"\n            }}\n          />\n          <Bar \n            dataKey=\"rate\" \n            fill={CHART_COLORS.success}\n            radius={[2, 2, 0, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nfunction LeadStatusChart({ data }: { data: PerformanceData[\"leadsByStatus\"] }) {\n  if (!data.length) return null;\n\n  return (\n    <div className=\"h-64 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={100}\n            paddingAngle={2}\n            dataKey=\"count\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip \n            formatter={(value: number, name: string, props: any) => [value, props.payload.status]}\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\"\n            }}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nfunction PerformanceChartSkeleton() {\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Skeleton className=\"h-5 w-40\" />\n            <Skeleton className=\"h-4 w-56\" />\n          </div>\n          <div className=\"flex space-x-2\">\n            <Skeleton className=\"h-8 w-24 rounded\" />\n            <Skeleton className=\"h-8 w-8 rounded\" />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Skeleton className=\"h-64 w-full rounded\" />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function PerformanceChart() {\n  const [chartType, setChartType] = useState<\"emails\" | \"responses\" | \"leads\">(\"emails\");\n  \n  const { data, isLoading, error, refetch, isRefetching } = useQuery<PerformanceData>({\n    queryKey: [\"/api/dashboard/performance\"],\n    refetchInterval: 120000, // Refetch every 2 minutes\n  });\n\n  if (isLoading) {\n    return <PerformanceChartSkeleton />;\n  }\n\n  if (error || !data) {\n    return (\n      <Card className=\"border-destructive/50\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-5 w-5 text-destructive\" />\n                <span>Performance Analytics</span>\n              </CardTitle>\n              <CardDescription>\n                Unable to load performance data\n              </CardDescription>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => refetch()}\n              data-testid=\"button-retry-performance\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <BarChart3 className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Failed to load performance analytics. Please try again.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const hasData = data.emailsSent.length > 0 || data.responseRates.length > 0 || data.leadsByStatus.length > 0;\n\n  if (!hasData) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-5 w-5 text-primary\" />\n                <span>Performance Analytics</span>\n              </CardTitle>\n              <CardDescription>\n                Track your outreach campaign performance over time\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <div className=\"p-3 rounded-full bg-muted/50 w-fit mx-auto mb-4\">\n              <BarChart3 className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"font-medium mb-2\">No performance data yet</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Send some emails and track responses to see your performance analytics.\n            </p>\n            <Button size=\"sm\" data-testid=\"button-start-campaign\">\n              Start Your First Campaign\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const chartOptions = [\n    { value: \"emails\", label: \"Email Trends\", icon: TrendingUp },\n    { value: \"responses\", label: \"Response Rates\", icon: BarChart3 },\n    { value: \"leads\", label: \"Lead Status\", icon: Calendar }\n  ] as const;\n\n  const renderChart = () => {\n    switch (chartType) {\n      case \"emails\":\n        return <EmailTrendsChart data={data.emailsSent} />;\n      case \"responses\":\n        return <ResponseRateChart data={data.responseRates} />;\n      case \"leads\":\n        return <LeadStatusChart data={data.leadsByStatus} />;\n      default:\n        return <EmailTrendsChart data={data.emailsSent} />;\n    }\n  };\n\n  return (\n    <Card className=\"card-hover\" data-testid=\"performance-chart-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-5 w-5 text-primary\" />\n              <span>Performance Analytics</span>\n              <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0.5\">\n                Live\n              </Badge>\n            </CardTitle>\n            <CardDescription>\n              Track your outreach campaign performance over time\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Select value={chartType} onValueChange={(value: any) => setChartType(value)}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-chart-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {chartOptions.map((option) => {\n                  const Icon = option.icon;\n                  return (\n                    <SelectItem key={option.value} value={option.value}>\n                      <div className=\"flex items-center space-x-2\">\n                        <Icon className=\"h-4 w-4\" />\n                        <span>{option.label}</span>\n                      </div>\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => refetch()}\n              disabled={isRefetching}\n              data-testid=\"button-refresh-performance\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isRefetching ? 'animate-spin' : ''}`} />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {renderChart()}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10735},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Plus,\n  Zap,\n  Calendar,\n  Upload,\n  Send,\n  Sparkles,\n  Clock,\n  FileText,\n  Mail\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nconst quickActionButtons = [\n  {\n    id: \"new-lead\",\n    title: \"Add Lead\",\n    description: \"Quick lead entry\",\n    icon: Plus,\n    color: \"bg-blue-500 hover:bg-blue-600\",\n    variant: \"default\" as const\n  },\n  {\n    id: \"generate-email\",\n    title: \"AI Email\",\n    description: \"Generate with AI\",\n    icon: Zap,\n    color: \"bg-purple-500 hover:bg-purple-600\",\n    variant: \"default\" as const,\n    badge: \"AI\"\n  },\n  {\n    id: \"schedule-campaign\",\n    title: \"Schedule\",\n    description: \"Plan follow-ups\",\n    icon: Calendar,\n    color: \"bg-green-500 hover:bg-green-600\",\n    variant: \"default\" as const\n  },\n  {\n    id: \"import-leads\",\n    title: \"Import CSV\",\n    description: \"Bulk upload\",\n    icon: Upload,\n    color: \"bg-orange-500 hover:bg-orange-600\",\n    variant: \"outline\" as const\n  }\n];\n\ninterface NewLeadFormData {\n  name: string;\n  email: string;\n  company: string;\n  role: string;\n  notes: string;\n}\n\ninterface GenerateEmailFormData {\n  leadId: string;\n  tone: \"professional\" | \"casual\" | \"direct\";\n  isFollowUp: boolean;\n}\n\nexport default function QuickActions() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [openDialog, setOpenDialog] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n\n  const [newLeadData, setNewLeadData] = useState<NewLeadFormData>({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    role: \"\",\n    notes: \"\"\n  });\n\n  const [emailData, setEmailData] = useState<GenerateEmailFormData>({\n    leadId: \"\",\n    tone: \"professional\",\n    isFollowUp: false\n  });\n\n  // Create lead mutation\n  const createLeadMutation = useMutation({\n    mutationFn: async (data: NewLeadFormData) => {\n      const response = await fetch(\"/api/leads\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create lead\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully!\",\n      });\n      setOpenDialog(null);\n      setNewLeadData({\n        name: \"\",\n        email: \"\",\n        company: \"\",\n        role: \"\",\n        notes: \"\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate email mutation\n  const generateEmailMutation = useMutation({\n    mutationFn: async (data: GenerateEmailFormData) => {\n      const response = await fetch(\"/api/ai/generate-email\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to generate email\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Email Generated!\",\n        description: \"AI has created a personalized email for you.\",\n      });\n      setOpenDialog(null);\n      // Here you could open an email compose dialog with the generated content\n      console.log(\"Generated email:\", data);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAction = (actionId: string) => {\n    switch (actionId) {\n      case \"new-lead\":\n        setOpenDialog(\"new-lead\");\n        break;\n      case \"generate-email\":\n        setOpenDialog(\"generate-email\");\n        break;\n      case \"schedule-campaign\":\n        // Navigate to campaigns page where users can schedule follow-ups\n        setLocation(\"/campaigns\");\n        break;\n      case \"import-leads\":\n        // Trigger file input\n        const fileInput = document.createElement(\"input\");\n        fileInput.type = \"file\";\n        fileInput.accept = \".csv\";\n        fileInput.onchange = handleFileUpload;\n        fileInput.click();\n        break;\n    }\n  };\n\n  const handleFileUpload = async (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const file = target.files?.[0];\n\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    try {\n      const response = await fetch(\"/api/leads/import\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to import leads\");\n      }\n\n      const result = await response.json();\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n\n      toast({\n        title: \"Import Successful\",\n        description: result.message,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Import Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateLead = () => {\n    if (!newLeadData.name || !newLeadData.email || !newLeadData.company) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in name, email, and company fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createLeadMutation.mutate(newLeadData);\n  };\n\n  const handleGenerateEmail = () => {\n    if (!emailData.leadId) {\n      toast({\n        title: \"No Lead Selected\",\n        description: \"Please select a lead to generate email for.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateEmailMutation.mutate(emailData);\n  };\n\n  return (\n    <Card className=\"card-hover\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          <span>Quick Actions</span>\n        </CardTitle>\n        <CardDescription>\n          Fast-track your outreach workflow\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {quickActionButtons.map((action) => {\n          const Icon = action.icon;\n          return (\n            <Button\n              key={action.id}\n              variant={action.variant}\n              className={`w-full justify-start h-auto py-3 px-4 ${\n                action.variant === \"default\" ? action.color : \"\"\n              }`}\n              onClick={() => handleAction(action.id)}\n              data-testid={`button-quick-${action.id}`}\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <Icon className=\"h-4 w-4 shrink-0\" />\n                <div className=\"flex-1 text-left\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-medium\">{action.title}</span>\n                    {action.badge && (\n                      <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0.5\">\n                        {action.badge}\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"text-xs opacity-75\">{action.description}</div>\n                </div>\n              </div>\n            </Button>\n          );\n        })}\n\n        {/* Recent Activities */}\n        <div className=\"pt-4 border-t\">\n          <h4 className=\"text-sm font-medium mb-2 flex items-center space-x-2\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Recent</span>\n          </h4>\n          <div className=\"space-y-2 text-xs text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span>3 new leads added today</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span>12 emails sent this week</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n              <span>2 follow-ups scheduled</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n\n      {/* New Lead Dialog */}\n      <Dialog open={openDialog === \"new-lead\"} onOpenChange={(open) => !open && setOpenDialog(null)}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Add New Lead</DialogTitle>\n            <DialogDescription>\n              Enter lead information to add them to your outreach pipeline.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name *</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"John Smith\"\n                value={newLeadData.name}\n                onChange={(e) => setNewLeadData({ ...newLeadData, name: e.target.value })}\n                data-testid=\"input-lead-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address *</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"john@company.com\"\n                value={newLeadData.email}\n                onChange={(e) => setNewLeadData({ ...newLeadData, email: e.target.value })}\n                data-testid=\"input-lead-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"company\">Company *</Label>\n              <Input\n                id=\"company\"\n                placeholder=\"Acme Corp\"\n                value={newLeadData.company}\n                onChange={(e) => setNewLeadData({ ...newLeadData, company: e.target.value })}\n                data-testid=\"input-lead-company\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role/Position</Label>\n              <Input\n                id=\"role\"\n                placeholder=\"Marketing Director\"\n                value={newLeadData.role}\n                onChange={(e) => setNewLeadData({ ...newLeadData, role: e.target.value })}\n                data-testid=\"input-lead-role\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Notes</Label>\n              <Textarea\n                id=\"notes\"\n                placeholder=\"Any additional information about this lead...\"\n                value={newLeadData.notes}\n                onChange={(e) => setNewLeadData({ ...newLeadData, notes: e.target.value })}\n                data-testid=\"textarea-lead-notes\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setOpenDialog(null)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreateLead}\n              disabled={createLeadMutation.isPending}\n              data-testid=\"button-create-lead\"\n            >\n              {createLeadMutation.isPending ? \"Creating...\" : \"Create Lead\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Generate Email Dialog */}\n      <Dialog open={openDialog === \"generate-email\"} onOpenChange={(open) => !open && setOpenDialog(null)}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Zap className=\"h-5 w-5 text-purple-500\" />\n              <span>Generate AI Email</span>\n            </DialogTitle>\n            <DialogDescription>\n              Let AI create a personalized email for your outreach campaign.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lead\">Select Lead</Label>\n              <Select value={emailData.leadId} onValueChange={(value) => setEmailData({ ...emailData, leadId: value })}>\n                <SelectTrigger data-testid=\"select-lead\">\n                  <SelectValue placeholder=\"Choose a lead to email\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"demo-lead-1\">John Smith - Acme Corp</SelectItem>\n                  <SelectItem value=\"demo-lead-2\">Sarah Johnson - TechStart Inc</SelectItem>\n                  <SelectItem value=\"demo-lead-3\">Mike Chen - Growth Co</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tone\">Email Tone</Label>\n              <Select value={emailData.tone} onValueChange={(value: any) => setEmailData({ ...emailData, tone: value })}>\n                <SelectTrigger data-testid=\"select-tone\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"professional\">Professional</SelectItem>\n                  <SelectItem value=\"casual\">Casual</SelectItem>\n                  <SelectItem value=\"direct\">Direct</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setOpenDialog(null)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={handleGenerateEmail}\n              disabled={generateEmailMutation.isPending}\n              className=\"bg-purple-500 hover:bg-purple-600\"\n              data-testid=\"button-generate-email\"\n            >\n              {generateEmailMutation.isPending ? \"Generating...\" : \"Generate Email\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":15099},"client/src/components/dashboard/recent-leads.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Users, \n  MoreHorizontal, \n  Mail, \n  Phone, \n  Building2, \n  Calendar,\n  Eye,\n  Edit3,\n  Trash2,\n  Send\n} from \"lucide-react\";\n\ninterface Lead {\n  id: string;\n  name: string;\n  email: string;\n  company: string;\n  role?: string;\n  status: \"new\" | \"contacted\" | \"replied\" | \"qualified\" | \"closed\";\n  lastContactDate?: string;\n  createdAt: string;\n  avatar?: string;\n  notes?: string;\n}\n\nconst statusConfig = {\n  new: {\n    label: \"New\",\n    className: \"status-new\",\n    icon: Users\n  },\n  contacted: {\n    label: \"Contacted\",\n    className: \"status-contacted\",\n    icon: Mail\n  },\n  replied: {\n    label: \"Replied\",\n    className: \"status-replied\",\n    icon: Phone\n  },\n  qualified: {\n    label: \"Qualified\",\n    className: \"status-qualified\",\n    icon: Building2\n  },\n  closed: {\n    label: \"Closed\",\n    className: \"status-closed\",\n    icon: Calendar\n  }\n};\n\nfunction LeadRow({ lead }: { lead: Lead }) {\n  const status = statusConfig[lead.status];\n  const StatusIcon = status.icon;\n  \n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"1 day ago\";\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return date.toLocaleDateString();\n  };\n\n  return (\n    <div className=\"flex items-center space-x-4 py-3 border-b border-border/50 last:border-0\">\n      <Avatar className=\"h-10 w-10\">\n        <AvatarImage src={lead.avatar} alt={lead.name} />\n        <AvatarFallback className=\"text-xs font-medium\">\n          {getInitials(lead.name)}\n        </AvatarFallback>\n      </Avatar>\n      \n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <h4 className=\"text-sm font-medium truncate\">{lead.name}</h4>\n          <Badge className={`text-xs px-1.5 py-0.5 ${status.className}`}>\n            <StatusIcon className=\"h-3 w-3 mr-1\" />\n            {status.label}\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center space-x-4 mt-1 text-xs text-muted-foreground\">\n          <span className=\"truncate\">{lead.email}</span>\n          <span>•</span>\n          <span className=\"truncate\">{lead.company}</span>\n          {lead.role && (\n            <>\n              <span>•</span>\n              <span className=\"truncate\">{lead.role}</span>\n            </>\n          )}\n        </div>\n        \n        <div className=\"text-xs text-muted-foreground mt-1\">\n          {lead.lastContactDate ? (\n            <>Last contact: {formatDate(lead.lastContactDate)}</>\n          ) : (\n            <>Added: {formatDate(lead.createdAt)}</>\n          )}\n        </div>\n      </div>\n      \n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-lead-menu-${lead.id}`}>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem data-testid={`menu-item-view-${lead.id}`}>\n            <Eye className=\"mr-2 h-4 w-4\" />\n            <span>View Details</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem data-testid={`menu-item-email-${lead.id}`}>\n            <Send className=\"mr-2 h-4 w-4\" />\n            <span>Send Email</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem data-testid={`menu-item-edit-${lead.id}`}>\n            <Edit3 className=\"mr-2 h-4 w-4\" />\n            <span>Edit Lead</span>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem \n            className=\"text-destructive focus:text-destructive\"\n            data-testid={`menu-item-delete-${lead.id}`}\n          >\n            <Trash2 className=\"mr-2 h-4 w-4\" />\n            <span>Delete Lead</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n\nfunction RecentLeadsSkeleton() {\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Skeleton className=\"h-5 w-32\" />\n            <Skeleton className=\"h-4 w-48\" />\n          </div>\n          <Skeleton className=\"h-8 w-20 rounded\" />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"flex items-center space-x-4 py-3\">\n            <Skeleton className=\"h-10 w-10 rounded-full\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-5 w-16 rounded-full\" />\n              </div>\n              <Skeleton className=\"h-3 w-48\" />\n              <Skeleton className=\"h-3 w-32\" />\n            </div>\n            <Skeleton className=\"h-8 w-8 rounded\" />\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function RecentLeads() {\n  const { data: leads, isLoading, error } = useQuery<Lead[]>({\n    queryKey: [\"/api/dashboard/recent-leads\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  if (isLoading) {\n    return <RecentLeadsSkeleton />;\n  }\n\n  if (error || !leads) {\n    return (\n      <Card className=\"border-destructive/50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5 text-destructive\" />\n            <span>Recent Leads</span>\n          </CardTitle>\n          <CardDescription>\n            Unable to load recent leads\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <Users className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Failed to load leads. Please try again.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!leads.length) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-primary\" />\n                <span>Recent Leads</span>\n              </CardTitle>\n              <CardDescription>\n                Your latest prospects and contacts\n              </CardDescription>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-first-lead\">\n              Add Lead\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <div className=\"p-3 rounded-full bg-muted/50 w-fit mx-auto mb-4\">\n              <Users className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"font-medium mb-2\">No leads yet</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Start building your pipeline by adding your first lead or importing from CSV.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-2 justify-center\">\n              <Button size=\"sm\" data-testid=\"button-add-lead-empty\">\n                Add Your First Lead\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-import-leads-empty\">\n                Import from CSV\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"card-hover\" data-testid=\"recent-leads-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-primary\" />\n              <span>Recent Leads</span>\n              <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0.5\">\n                {leads.length}\n              </Badge>\n            </CardTitle>\n            <CardDescription>\n              Your latest prospects and their current status\n            </CardDescription>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-leads\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-0\">\n          {leads.slice(0, 8).map((lead) => (\n            <LeadRow key={lead.id} lead={lead} />\n          ))}\n        </div>\n        \n        {leads.length > 8 && (\n          <div className=\"pt-4 border-t mt-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full\"\n              data-testid=\"button-load-more-leads\"\n            >\n              Load more leads ({leads.length - 8} remaining)\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9869},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  TrendingDown,\n  Users, \n  Mail, \n  Target, \n  Calendar,\n  ArrowUpRight,\n  ArrowDownRight\n} from \"lucide-react\";\nimport type { DashboardStats } from \"@shared/schema\";\n\nconst statCards = [\n  {\n    key: \"totalLeads\" as keyof DashboardStats,\n    title: \"Total Leads\",\n    icon: Users,\n    description: \"Active prospects\",\n    format: (value: number) => value.toLocaleString(),\n    growthKey: \"leadsGrowth\" as keyof DashboardStats\n  },\n  {\n    key: \"emailsSent\" as keyof DashboardStats,\n    title: \"Emails Sent\",\n    icon: Mail,\n    description: \"This month\",\n    format: (value: number) => value.toLocaleString(),\n    growthKey: \"emailsGrowth\" as keyof DashboardStats\n  },\n  {\n    key: \"responseRate\" as keyof DashboardStats,\n    title: \"Response Rate\",\n    icon: Target,\n    description: \"Email replies\",\n    format: (value: number) => `${value}%`,\n    growthKey: \"responseChange\" as keyof DashboardStats\n  },\n  {\n    key: \"followupsScheduled\" as keyof DashboardStats,\n    title: \"Follow-ups\",\n    icon: Calendar,\n    description: \"Scheduled\",\n    format: (value: number) => value.toLocaleString(),\n    growthKey: \"followupsGrowth\" as keyof DashboardStats\n  }\n];\n\nfunction StatCard({ \n  title, \n  value, \n  growth, \n  icon: Icon, \n  description,\n  format \n}: {\n  title: string;\n  value: number;\n  growth: number;\n  icon: React.ComponentType<{ className?: string }>;\n  description: string;\n  format: (value: number) => string;\n}) {\n  const isPositive = growth > 0;\n  const isNeutral = growth === 0;\n  \n  return (\n    <Card className=\"card-hover\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{format(value)}</div>\n        <div className=\"flex items-center space-x-2 mt-1\">\n          <CardDescription className=\"text-xs\">\n            {description}\n          </CardDescription>\n          {!isNeutral && (\n            <Badge \n              variant=\"secondary\" \n              className={`text-xs px-1.5 py-0.5 ${\n                isPositive \n                  ? \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200\" \n                  : \"bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200\"\n              }`}\n            >\n              {isPositive ? (\n                <ArrowUpRight className=\"h-3 w-3 mr-1\" />\n              ) : (\n                <ArrowDownRight className=\"h-3 w-3 mr-1\" />\n              )}\n              {Math.abs(growth)}%\n            </Badge>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction StatCardSkeleton() {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <Skeleton className=\"h-4 w-20\" />\n        <Skeleton className=\"h-4 w-4 rounded\" />\n      </CardHeader>\n      <CardContent>\n        <Skeleton className=\"h-8 w-16 mb-2\" />\n        <div className=\"flex items-center space-x-2\">\n          <Skeleton className=\"h-3 w-24\" />\n          <Skeleton className=\"h-5 w-10 rounded-full\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function StatsCards() {\n  const { data: stats, isLoading, error } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"stats-grid\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <StatCardSkeleton key={i} />\n        ))}\n      </div>\n    );\n  }\n\n  if (error || !stats) {\n    return (\n      <div className=\"stats-grid\">\n        {statCards.map((card, i) => (\n          <Card key={i} className=\"border-destructive/50\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {card.title}\n              </CardTitle>\n              <card.icon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-destructive\">--</div>\n              <CardDescription className=\"text-xs\">\n                Unable to load data\n              </CardDescription>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stats-grid\" data-testid=\"stats-cards\">\n      {statCards.map((card) => (\n        <StatCard\n          key={card.key}\n          title={card.title}\n          value={stats[card.key] as number}\n          growth={stats[card.growthKey] as number}\n          icon={card.icon}\n          description={card.description}\n          format={card.format}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":5170},"client/src/components/email/ai-email-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Lead } from \"@shared/schema\";\nimport type { EmailGenerationRequest, EmailGenerationResponse } from \"@/types\";\n\ninterface AIEmailGeneratorProps {\n  onClose: () => void;\n  onSuccess: () => void;\n  preselectedLead?: Lead;\n}\n\nexport default function AIEmailGenerator({ onClose, onSuccess, preselectedLead }: AIEmailGeneratorProps) {\n  const [selectedLeadId, setSelectedLeadId] = useState<string>(preselectedLead?.id || \"\");\n  const [selectedTone, setSelectedTone] = useState<\"professional\" | \"casual\" | \"direct\">(\"professional\");\n  const [generatedEmail, setGeneratedEmail] = useState<EmailGenerationResponse | null>(null);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [editedSubject, setEditedSubject] = useState(\"\");\n\n  const { toast } = useToast();\n\n  // Fetch leads for selection\n  const { data: leads } = useQuery({\n    queryKey: [\"/api/leads\"],\n    enabled: !preselectedLead,\n  });\n\n  const selectedLead = preselectedLead || (leads?.find((lead: Lead) => lead.id === selectedLeadId));\n\n  // Generate email mutation\n  const generateMutation = useMutation({\n    mutationFn: async (request: EmailGenerationRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-email\", request);\n      return response.json();\n    },\n    onSuccess: (data: EmailGenerationResponse) => {\n      setGeneratedEmail(data);\n      setEditedSubject(data.subject);\n      setEditedContent(data.content);\n      toast({\n        title: \"Success\",\n        description: \"Email generated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Save email campaign mutation\n  const saveMutation = useMutation({\n    mutationFn: async (emailData: { subject: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/email-campaigns\", {\n        leadId: selectedLeadId,\n        subject: emailData.subject,\n        content: emailData.content,\n        tone: selectedTone,\n        isFollowUp: false,\n        followUpSequence: 0,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Email campaign saved successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save email campaign\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!selectedLeadId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a lead first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      leadId: selectedLeadId,\n      tone: selectedTone,\n      isFollowUp: false,\n    });\n  };\n\n  const handleRegenerate = () => {\n    handleGenerate();\n  };\n\n  const handleSave = () => {\n    if (!editedSubject || !editedContent) {\n      toast({\n        title: \"Error\",\n        description: \"Please ensure both subject and content are filled\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMutation.mutate({\n      subject: editedSubject,\n      content: editedContent,\n    });\n  };\n\n  // Send email mutation\n  const sendEmailMutation = useMutation({\n    mutationFn: async () => {\n      // First save the campaign\n      const response = await apiRequest(\"POST\", \"/api/email-campaigns\", {\n        leadId: selectedLeadId,\n        subject: editedSubject,\n        content: editedContent,\n        tone: selectedTone,\n        isFollowUp: false,\n        followUpSequence: 0,\n      });\n      const campaignData = await response.json();\n\n      // Then send the email\n      const sendResponse = await apiRequest(\"POST\", `/api/campaigns/${campaignData.id}/send`, {\n        leadId: selectedLeadId,\n      });\n      return sendResponse.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Email sent successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendEmail = () => {\n    if (!editedSubject || !editedContent) {\n      toast({\n        title: \"Error\",\n        description: \"Please ensure both subject and content are filled\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedLeadId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a lead first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendEmailMutation.mutate();\n  };\n\n  const toneOptions = [\n    {\n      value: \"professional\" as const,\n      label: \"Professional\",\n      description: \"Formal and business-oriented\",\n    },\n    {\n      value: \"casual\" as const,\n      label: \"Casual\",\n      description: \"Friendly and conversational\",\n    },\n    {\n      value: \"direct\" as const,\n      label: \"Direct\",\n      description: \"Straight to the point\",\n    },\n  ];\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <i className=\"fas fa-robot mr-3 text-secondary-500\"></i>\n            AI Email Generator\n          </DialogTitle>\n          <DialogDescription>\n            Generate personalized outreach emails using AI based on your lead information.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Lead Selection */}\n          {!preselectedLead && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">Select Lead</label>\n              <Select value={selectedLeadId} onValueChange={setSelectedLeadId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a lead to generate email for\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {leads?.map((lead: Lead) => (\n                    <SelectItem key={lead.id} value={lead.id}>\n                      {lead.name} - {lead.company}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Selected Lead Info */}\n          {selectedLead && (\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-sm font-medium\">\n                      {selectedLead.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{selectedLead.name}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      {selectedLead.role || 'Contact'} at {selectedLead.company}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">{selectedLead.email}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Tone Selection */}\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-gray-700\">Email Tone</label>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {toneOptions.map((tone) => (\n                <Button\n                  key={tone.value}\n                  variant={selectedTone === tone.value ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedTone(tone.value)}\n                  className={`p-4 h-auto flex-col items-start ${\n                    selectedTone === tone.value\n                      ? \"bg-blue-600 hover:bg-blue-700 text-white\"\n                      : \"border-gray-300 hover:border-gray-400\"\n                  }`}\n                >\n                  <span className=\"font-medium\">{tone.label}</span>\n                  <span className=\"text-xs opacity-80\">{tone.description}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Generate Button */}\n          {!generatedEmail && (\n            <div className=\"text-center\">\n              <Button\n                onClick={handleGenerate}\n                disabled={!selectedLeadId || generateMutation.isPending}\n                className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                size=\"lg\"\n              >\n                {generateMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-magic mr-2\"></i>\n                    Generate AI Email\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n\n          {/* Generated Email */}\n          {generatedEmail && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Generated Email</h3>\n                <Badge variant=\"outline\" className=\"text-secondary-600 border-secondary-300\">\n                  {selectedTone.charAt(0).toUpperCase() + selectedTone.slice(1)} tone\n                </Badge>\n              </div>\n\n              {/* Subject Line */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Subject Line</label>\n                <input\n                  type=\"text\"\n                  value={editedSubject}\n                  onChange={(e) => setEditedSubject(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n\n              {/* Email Content */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Email Content</label>\n                <Textarea\n                  value={editedContent}\n                  onChange={(e) => setEditedContent(e.target.value)}\n                  className=\"min-h-[300px] font-mono text-sm\"\n                  placeholder=\"Email content will appear here...\"\n                />\n              </div>\n\n              {/* Email Preview */}\n              <Card className=\"border-gray-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-gray-600\">\n                      <strong>To:</strong> {selectedLead?.email}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      <strong>Subject:</strong> {editedSubject}\n                    </div>\n                    <hr className=\"border-gray-200\" />\n                    <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">\n                      {editedContent}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {generatedEmail && (\n              <Button\n                variant=\"outline\"\n                onClick={handleRegenerate}\n                disabled={generateMutation.isPending}\n                className=\"text-gray-600 hover:text-gray-800\"\n              >\n                <i className=\"fas fa-sync-alt mr-2\"></i>\n                Regenerate\n              </Button>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={generateMutation.isPending || saveMutation.isPending || sendEmailMutation.isPending}\n            >\n              Cancel\n            </Button>\n\n            {generatedEmail && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleSave}\n                  disabled={saveMutation.isPending || sendEmailMutation.isPending}\n                >\n                  {saveMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-save mr-2\"></i>\n                      Save Draft\n                    </>\n                  )}\n                </Button>\n\n                <Button\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  onClick={handleSendEmail}\n                  disabled={saveMutation.isPending || sendEmailMutation.isPending}\n                >\n                  {sendEmailMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-paper-plane mr-2\"></i>\n                      Send Email\n                    </>\n                  )}\n                </Button>\n              </>\n            )}\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15323},"client/src/components/email/email-tracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { EmailCampaign, Lead } from \"@shared/schema\";\n\ninterface EmailTrackerProps {\n  campaignId?: string;\n  leadId?: string;\n}\n\nexport default function EmailTracker({ campaignId, leadId }: EmailTrackerProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedLead, setSelectedLead] = useState<string>(\"\");\n\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery<EmailCampaign[]>({\n    queryKey: [\"/api/email-campaigns\"],\n  });\n\n  const { data: leads } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: async ({ campaignId, leadId }: { campaignId: string; leadId: string }) => {\n      const response = await apiRequest(\"POST\", `/api/campaigns/${campaignId}/send`, { leadId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email sent!\",\n        description: \"The email has been sent successfully and is being tracked.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send email\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markRepliedMutation = useMutation({\n    mutationFn: async ({ campaignId }: { campaignId: string }) => {\n      const response = await apiRequest(\"POST\", `/api/email-campaigns/${campaignId}/mark-replied`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Marked as replied!\",\n        description: \"The campaign has been marked as replied.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-campaigns\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to mark as replied\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scheduleFollowUpMutation = useMutation({\n    mutationFn: async ({ campaignId, delay }: { campaignId: string; delay: number }) => {\n      const response = await apiRequest(\"POST\", `/api/email-campaigns/${campaignId}/schedule-followup`, { delayDays: Math.ceil(delay / 86400) });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Follow-up scheduled!\",\n        description: \"The follow-up email has been scheduled successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to schedule follow-up\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string | null) => {\n    const statusColors = {\n      draft: \"secondary\",\n      sent: \"default\",\n      opened: \"outline\",\n      replied: \"default\",\n      bounced: \"destructive\"\n    } as const;\n\n    const color = statusColors[status as keyof typeof statusColors] || \"secondary\";\n    \n    return (\n      <Badge variant={color}>\n        {status || \"draft\"}\n      </Badge>\n    );\n  };\n\n  const getStatusIcon = (status: string | null) => {\n    switch (status) {\n      case \"sent\":\n        return \"📤\";\n      case \"opened\":\n        return \"👁️\";\n      case \"replied\":\n        return \"💬\";\n      case \"bounced\":\n        return \"❌\";\n      default:\n        return \"📝\";\n    }\n  };\n\n  if (campaignsLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading email campaigns...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <span className=\"mr-3\">📊</span>\n            Email Campaign Tracking\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {campaigns && campaigns.length > 0 ? (\n              campaigns.map((campaign) => (\n                <div key={campaign.id} className=\"p-4 border rounded-lg bg-gray-50\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">{getStatusIcon(campaign.status)}</span>\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{campaign.subject}</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {campaign.isFollowUp ? \"Follow-up\" : \"Initial\"} • Sequence #{campaign.followUpSequence || 0}\n                        </p>\n                      </div>\n                    </div>\n                    {getStatusBadge(campaign.status)}\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                    <div className=\"text-center p-3 bg-white rounded border\">\n                      <p className=\"text-2xl font-bold text-blue-600\">\n                        {campaign.sentAt ? \"1\" : \"0\"}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Sent</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-white rounded border\">\n                      <p className=\"text-2xl font-bold text-green-600\">\n                        {campaign.openedAt ? \"1\" : \"0\"}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Opened</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-white rounded border\">\n                      <p className=\"text-2xl font-bold text-purple-600\">\n                        {campaign.repliedAt ? \"1\" : \"0\"}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Replied</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-gray-600\">\n                      {campaign.sentAt && (\n                        <p>Sent: {new Date(campaign.sentAt).toLocaleString()}</p>\n                      )}\n                      {campaign.openedAt && (\n                        <p>Opened: {new Date(campaign.openedAt).toLocaleString()}</p>\n                      )}\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      {campaign.status === \"draft\" && leads && (\n                        <>\n                          <Select value={selectedLead} onValueChange={setSelectedLead}>\n                            <SelectTrigger className=\"w-48\">\n                              <SelectValue placeholder=\"Select lead\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {leads.map((lead) => (\n                                <SelectItem key={lead.id} value={lead.id}>\n                                  {lead.name} ({lead.company})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <Button\n                            onClick={() => sendEmailMutation.mutate({ \n                              campaignId: campaign.id, \n                              leadId: selectedLead \n                            })}\n                            disabled={!selectedLead || sendEmailMutation.isPending}\n                            size=\"sm\"\n                          >\n                            {sendEmailMutation.isPending ? \"Sending...\" : \"Send Email\"}\n                          </Button>\n                        </>\n                      )}\n\n                      {(campaign.status === \"sent\" || campaign.status === \"opened\") && (\n                        <>\n                          <Button\n                            onClick={() => markRepliedMutation.mutate({ campaignId: campaign.id })}\n                            disabled={markRepliedMutation.isPending}\n                            size=\"sm\"\n                            variant=\"outline\"\n                          >\n                            {markRepliedMutation.isPending ? \"Marking...\" : \"Mark as Replied\"}\n                          </Button>\n                          {!campaign.isFollowUp && (\n                            <Button\n                              onClick={() => scheduleFollowUpMutation.mutate({ \n                                campaignId: campaign.id, \n                                delay: 86400 // 24 hours\n                              })}\n                              disabled={scheduleFollowUpMutation.isPending}\n                              size=\"sm\"\n                              variant=\"outline\"\n                            >\n                              {scheduleFollowUpMutation.isPending ? \"Scheduling...\" : \"Schedule Follow-up\"}\n                            </Button>\n                          )}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">📧</span>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No email campaigns yet</h3>\n                <p className=\"text-gray-500\">\n                  Create your first email campaign to start tracking opens, clicks, and replies.\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10425},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Search, Plus, LogOut, User, Settings, Moon, Sun } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  actions?: React.ReactNode;\n}\n\nexport default function Header({ title, subtitle, actions }: HeaderProps) {\n  const { user } = useAuth();\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n  const [, setLocation] = useLocation();\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getUserInitials = () => {\n    if (!user?.firstName && !user?.lastName) return \"U\";\n    return `${user?.firstName?.[0] || \"\"}${user?.lastName?.[0] || \"\"}`.toUpperCase();\n  };\n\n  return (\n    <header className=\"h-16 border-b border-border bg-card/50 backdrop-blur supports-[backdrop-filter]:bg-card/50\">\n      <div className=\"flex items-center justify-between h-full px-6\">\n        {/* Left side - Title and search */}\n        <div className=\"flex items-center space-x-4 flex-1\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl font-semibold tracking-tight text-foreground\">\n              {title}\n            </h1>\n            {subtitle && (\n              <p className=\"text-sm text-muted-foreground mt-0.5\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-2 ml-8\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search leads, campaigns...\"\n                className=\"pl-10 w-64 bg-background/50\"\n                data-testid=\"input-global-search\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Right side - Actions and user menu */}\n        <div className=\"flex items-center space-x-3\">\n          {actions}\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"hidden sm:flex items-center space-x-2 bg-primary text-primary-foreground hover:bg-primary/90 border-primary\"\n            data-testid=\"button-new-lead\"\n            onClick={() => setLocation('/leads')}\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span>New Lead</span>\n          </Button>\n\n          {/* Notifications */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-4 w-4\" />\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-destructive text-destructive-foreground\">\n                  3\n                </Badge>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-80\">\n              <DropdownMenuLabel className=\"flex items-center justify-between\">\n                <span>Notifications</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">3 new</Badge>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              \n              <div className=\"p-2 space-y-2\">\n                <div className=\"p-2 rounded-lg bg-blue-50 dark:bg-blue-950/50 border border-blue-200 dark:border-blue-800\">\n                  <p className=\"text-sm font-medium\">New email reply received</p>\n                  <p className=\"text-xs text-muted-foreground\">John Smith replied to your outreach</p>\n                </div>\n                \n                <div className=\"p-2 rounded-lg bg-green-50 dark:bg-green-950/50 border border-green-200 dark:border-green-800\">\n                  <p className=\"text-sm font-medium\">Campaign completed</p>\n                  <p className=\"text-xs text-muted-foreground\">Q4 Outreach campaign finished successfully</p>\n                </div>\n                \n                <div className=\"p-2 rounded-lg bg-amber-50 dark:bg-amber-950/50 border border-amber-200 dark:border-amber-800\">\n                  <p className=\"text-sm font-medium\">Follow-up due</p>\n                  <p className=\"text-xs text-muted-foreground\">5 leads need follow-up today</p>\n                </div>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Theme toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n            className=\"text-foreground hover:bg-accent hover:text-accent-foreground border-0\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"h-4 w-4\" />\n            ) : (\n              <Sun className=\"h-4 w-4\" />\n            )}\n          </Button>\n\n          {/* User menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={user?.profileImageUrl} alt={user?.firstName || \"User\"} />\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                    {getUserInitials()}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <DropdownMenuLabel className=\"font-normal\">\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm font-medium leading-none\">\n                    {user?.firstName} {user?.lastName}\n                  </p>\n                  <p className=\"text-xs leading-none text-muted-foreground\">\n                    {user?.email}\n                  </p>\n                  <Badge variant=\"secondary\" className=\"w-fit text-xs capitalize mt-1\">\n                    {user?.role || \"user\"}\n                  </Badge>\n                </div>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem data-testid=\"menu-item-profile\">\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profile</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem data-testid=\"menu-item-settings\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={handleLogout}\n                className=\"text-destructive focus:text-destructive\"\n                data-testid=\"menu-item-logout\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":7680},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  LayoutDashboard, \n  Users, \n  Mail, \n  BarChart3, \n  Settings,\n  Zap,\n  TrendingUp,\n  Send,\n  Calendar,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\n\nconst navigation = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: LayoutDashboard,\n    description: \"Overview & insights\"\n  },\n  {\n    name: \"Leads\",\n    href: \"/leads\",\n    icon: Users,\n    description: \"Manage contacts\"\n  },\n  {\n    name: \"Campaigns\",\n    href: \"/campaigns\",\n    icon: Mail,\n    description: \"Email outreach\"\n  },\n  {\n    name: \"Analytics\",\n    href: \"/analytics\",\n    icon: BarChart3,\n    description: \"Performance data\"\n  },\n  {\n    name: \"Integrations\",\n    href: \"/integrations\",\n    icon: Settings,\n    description: \"Email & tools\"\n  }\n];\n\nconst quickActions = [\n  {\n    name: \"Generate Email\",\n    icon: Zap,\n    description: \"AI-powered email\",\n    badge: \"AI\"\n  },\n  {\n    name: \"Schedule Follow-up\",\n    icon: Calendar,\n    description: \"Automated sequences\"\n  },\n  {\n    name: \"Send Campaign\",\n    icon: Send,\n    description: \"Bulk outreach\"\n  }\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <div className={cn(\n      \"h-screen bg-card border-r border-border flex flex-col transition-all duration-300 relative\",\n      collapsed ? \"w-16\" : \"w-64\"\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          {!collapsed && (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold tracking-tight\">OutreachX</h2>\n                <p className=\"text-xs text-muted-foreground\">Lead Generation</p>\n              </div>\n            </div>\n          )}\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setCollapsed(!collapsed)}\n            className=\"h-8 w-8 shrink-0\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {collapsed ? (\n              <ChevronRight className=\"h-4 w-4\" />\n            ) : (\n              <ChevronLeft className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex-1 overflow-y-auto py-4\">\n        <nav className=\"px-2 space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            const Icon = item.icon;\n\n            return (\n              <Link \n                key={item.name} \n                href={item.href}\n                className={cn(\n                  \"group flex items-center rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200\",\n                  \"hover:bg-accent hover:text-accent-foreground\",\n                  \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\",\n                  isActive \n                    ? \"bg-primary text-primary-foreground shadow-sm\" \n                    : \"text-muted-foreground\"\n                )}\n                data-testid={`link-nav-${item.name.toLowerCase()}`}\n              >\n                <Icon className={cn(\n                  \"shrink-0 transition-transform duration-200\",\n                  collapsed ? \"h-5 w-5\" : \"h-4 w-4 mr-3\",\n                  \"group-hover:scale-110\"\n                )} />\n\n                {!collapsed && (\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium\">{item.name}</div>\n                    <div className=\"text-xs opacity-75 truncate\">{item.description}</div>\n                  </div>\n                )}\n              </Link>\n            );\n          })}\n        </nav>\n\n        {!collapsed && (\n          <>\n            <Separator className=\"mx-4 my-4\" />\n\n            {/* Quick Actions */}\n            <div className=\"px-4\">\n              <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wide mb-3\">\n                Quick Actions\n              </h3>\n              <div className=\"space-y-2\">\n                {quickActions.map((action) => {\n                  const Icon = action.icon;\n\n                  return (\n                    <button\n                      key={action.name}\n                      className={cn(\n                        \"w-full group flex items-center rounded-lg px-3 py-2 text-sm\",\n                        \"hover:bg-accent hover:text-accent-foreground transition-all duration-200\",\n                        \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\",\n                        \"text-left\"\n                      )}\n                      data-testid={`button-quick-${action.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-3 shrink-0 text-muted-foreground group-hover:text-foreground transition-colors\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium truncate\">{action.name}</span>\n                          {action.badge && (\n                            <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0.5\">\n                              {action.badge}\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground truncate\">\n                          {action.description}\n                        </div>\n                      </div>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <Separator className=\"mx-4 my-4\" />\n\n            {/* Status */}\n            <div className=\"px-4\">\n              <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span>All systems operational</span>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6647},"client/src/components/leads/csv-import.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { CSVImportResult } from \"@/types\";\n\ninterface CSVImportProps {\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function CSVImport({ onClose, onSuccess }: CSVImportProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [importResult, setImportResult] = useState<CSVImportResult | null>(null);\n  const { toast } = useToast();\n\n  const downloadTemplate = async () => {\n    try {\n      const response = await fetch(\"/api/leads/csv-template\", {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to download template\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"leads-template.csv\";\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"CSV template downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch(\"/api/leads/import\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Import failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: CSVImportResult) => {\n      setImportResult(data);\n      if (!data.errors || data.errors.length === 0) {\n        toast({\n          title: \"Success\",\n          description: data.message,\n        });\n        setTimeout(() => {\n          onSuccess();\n        }, 2000);\n      }\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      \n      try {\n        const errorMessage = error.message;\n        if (errorMessage.includes(\"Validation errors\")) {\n          const errorData = JSON.parse(errorMessage.split(\": \")[1]);\n          setImportResult(errorData);\n        } else {\n          toast({\n            title: \"Error\",\n            description: errorMessage,\n            variant: \"destructive\",\n          });\n        }\n      } catch {\n        toast({\n          title: \"Error\",\n          description: \"Failed to import CSV file\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const file = e.dataTransfer.files[0];\n      if (file.type === \"text/csv\" || file.name.endsWith(\".csv\")) {\n        setSelectedFile(file);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Please select a valid CSV file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      if (file.type === \"text/csv\" || file.name.endsWith(\".csv\")) {\n        setSelectedFile(file);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Please select a valid CSV file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleImport = () => {\n    if (selectedFile) {\n      importMutation.mutate(selectedFile);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <i className=\"fas fa-upload mr-3 text-primary-500\"></i>\n            Import Leads from CSV\n          </DialogTitle>\n          <DialogDescription>\n            Upload a CSV file to bulk import leads into your database.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Template Download */}\n          <Card className=\"border-dashed border-2 border-gray-300\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-download text-blue-600\"></i>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Download CSV Template</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Download our template to ensure your CSV file has the correct format.\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={downloadTemplate}\n                className=\"border-blue-300 text-blue-700 hover:bg-blue-50\"\n              >\n                <i className=\"fas fa-download mr-2\"></i>\n                Download Template\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* File Upload */}\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n              dragActive\n                ? \"border-primary-500 bg-primary-50\"\n                : \"border-gray-300 hover:border-gray-400\"\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n          >\n            {selectedFile ? (\n              <div className=\"space-y-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto\">\n                  <i className=\"fas fa-file-csv text-green-600\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">{selectedFile.name}</p>\n                  <p className=\"text-sm text-gray-600\">{formatFileSize(selectedFile.size)}</p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSelectedFile(null)}\n                  className=\"text-gray-600\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>\n                  Remove File\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mx-auto\">\n                  <i className=\"fas fa-cloud-upload-alt text-gray-400\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">Drag and drop your CSV file here</p>\n                  <p className=\"text-sm text-gray-600\">or click to browse</p>\n                </div>\n                <div>\n                  <Input\n                    type=\"file\"\n                    accept=\".csv\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                    id=\"csv-upload\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => document.getElementById(\"csv-upload\")?.click()}\n                  >\n                    <i className=\"fas fa-folder-open mr-2\"></i>\n                    Select CSV File\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Import Progress */}\n          {importMutation.isPending && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Importing leads...</span>\n                <span>Processing</span>\n              </div>\n              <Progress value={50} className=\"w-full\" />\n            </div>\n          )}\n\n          {/* Import Results */}\n          {importResult && (\n            <div className=\"space-y-4\">\n              {importResult.errors && importResult.errors.length > 0 ? (\n                <Alert variant=\"destructive\">\n                  <i className=\"fas fa-exclamation-triangle\"></i>\n                  <AlertDescription>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium\">Import completed with errors:</p>\n                      <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                        {importResult.errors.slice(0, 5).map((error, index) => (\n                          <li key={index}>{error}</li>\n                        ))}\n                        {importResult.errors.length > 5 && (\n                          <li>... and {importResult.errors.length - 5} more errors</li>\n                        )}\n                      </ul>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                  <AlertDescription className=\"text-green-800\">\n                    {importResult.message}\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={importMutation.isPending}\n          >\n            {importResult && !importResult.errors ? \"Close\" : \"Cancel\"}\n          </Button>\n          {!importResult && (\n            <Button\n              onClick={handleImport}\n              disabled={!selectedFile || importMutation.isPending}\n              className=\"bg-primary-500 hover:bg-primary-600\"\n            >\n              {importMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Importing...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Import Leads\n                </>\n              )}\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11796},"client/src/components/leads/lead-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { insertLeadSchema, type Lead } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\ninterface LeadFormProps {\n  lead?: Lead | null;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst leadFormSchema = insertLeadSchema.extend({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  company: z.string().min(1, \"Company is required\"),\n  role: z.string().optional(),\n  notes: z.string().optional(),\n  status: z.enum([\"new\", \"contacted\", \"replied\", \"follow_up_scheduled\", \"qualified\", \"closed\"]).optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadFormSchema>;\n\nexport default function LeadForm({ lead, onClose, onSuccess }: LeadFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!lead;\n\n  const form = useForm<LeadFormData>({\n    resolver: zodResolver(leadFormSchema),\n    defaultValues: {\n      name: lead?.name || \"\",\n      email: lead?.email || \"\",\n      company: lead?.company || \"\",\n      role: lead?.role || \"\",\n      notes: lead?.notes || \"\",\n      status: lead?.status || \"new\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: LeadFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/leads\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: LeadFormData) => {\n      const response = await apiRequest(\"PUT\", `/api/leads/${lead!.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Lead updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (false) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LeadFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <i className=\"fas fa-user-plus mr-3 text-primary-500\"></i>\n            {isEditing ? \"Edit Lead\" : \"Add New Lead\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditing \n              ? \"Update the lead information below.\" \n              : \"Fill in the details to add a new lead to your database.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"john@example.com\" type=\"email\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"company\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Company *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Example Corp\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role/Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"CEO, Marketing Director, etc.\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select lead status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"new\">New</SelectItem>\n                      <SelectItem value=\"contacted\">Contacted</SelectItem>\n                      <SelectItem value=\"replied\">Replied</SelectItem>\n                      <SelectItem value=\"follow_up_scheduled\">Follow-up Scheduled</SelectItem>\n                      <SelectItem value=\"qualified\">Qualified</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Any additional notes about this lead...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Optional notes to help personalize your outreach\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                disabled={isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isPending}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n              >\n                {isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    {isEditing ? \"Updating...\" : \"Creating...\"}\n                  </>\n                ) : (\n                  <>\n                    <i className={`fas ${isEditing ? \"fa-save\" : \"fa-plus\"} mr-2`}></i>\n                    {isEditing ? \"Update Lead\" : \"Create Lead\"}\n                  </>\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9376},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }","size_bytes":260},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/dashboard/email-tracking-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface EmailTrackingStatsProps {\n  leadId?: string;\n}\n\ninterface EmailCampaign {\n  id: string;\n  subject: string;\n  status: 'draft' | 'sent' | 'opened' | 'replied' | 'bounced';\n  sentAt?: string;\n  openedAt?: string;\n  repliedAt?: string;\n  trackingId?: string;\n  isFollowUp: boolean;\n  followUpSequence?: number;\n}\n\nexport default function EmailTrackingStats({ leadId }: EmailTrackingStatsProps) {\n  const { data: campaigns = [], isLoading } = useQuery<EmailCampaign[]>({\n    queryKey: leadId ? [\"/api/email-campaigns\", leadId] : [\"/api/email-campaigns\"],\n    queryFn: async () => {\n      const params = leadId ? `?leadId=${leadId}` : '';\n      const response = await fetch(`/api/email-campaigns${params}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch campaigns');\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Email Tracking</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent': return 'bg-blue-100 text-blue-700';\n      case 'opened': return 'bg-green-100 text-green-700';\n      case 'replied': return 'bg-emerald-100 text-emerald-700';\n      case 'bounced': return 'bg-red-100 text-red-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent': return 'fas fa-paper-plane';\n      case 'opened': return 'fas fa-envelope-open';\n      case 'replied': return 'fas fa-reply';\n      case 'bounced': return 'fas fa-exclamation-triangle';\n      default: return 'fas fa-clock';\n    }\n  };\n\n  const stats = {\n    total: campaigns.length,\n    sent: campaigns.filter(c => ['sent', 'opened', 'replied'].includes(c.status)).length,\n    opened: campaigns.filter(c => ['opened', 'replied'].includes(c.status)).length,\n    replied: campaigns.filter(c => c.status === 'replied').length,\n    followUps: campaigns.filter(c => c.isFollowUp).length,\n  };\n\n  const openRate = stats.sent > 0 ? Math.round((stats.opened / stats.sent) * 100) : 0;\n  const replyRate = stats.sent > 0 ? Math.round((stats.replied / stats.sent) * 100) : 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <i className=\"fas fa-chart-line\"></i>\n          Email Tracking {leadId && \"for Lead\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Statistics Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.sent}</div>\n            <div className=\"text-sm text-muted-foreground\">Sent</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{openRate}%</div>\n            <div className=\"text-sm text-muted-foreground\">Open Rate</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-emerald-600\">{replyRate}%</div>\n            <div className=\"text-sm text-muted-foreground\">Reply Rate</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{stats.followUps}</div>\n            <div className=\"text-sm text-muted-foreground\">Follow-ups</div>\n          </div>\n        </div>\n\n        {/* Recent Campaigns */}\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium\">Recent Campaigns</h4>\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n            {campaigns.slice(0, 10).map((campaign) => (\n              <div \n                key={campaign.id} \n                className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n                data-testid={`campaign-${campaign.id}`}\n              >\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <p className=\"font-medium truncate\">{campaign.subject}</p>\n                    {campaign.isFollowUp && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Follow-up #{campaign.followUpSequence}\n                      </Badge>\n                    )}\n                  </div>\n                  {campaign.sentAt && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sent: {new Date(campaign.sentAt).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n                <Badge className={getStatusColor(campaign.status)}>\n                  <i className={`${getStatusIcon(campaign.status)} mr-1 text-xs`}></i>\n                  {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                </Badge>\n              </div>\n            ))}\n            \n            {campaigns.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <i className=\"fas fa-inbox text-4xl mb-2\"></i>\n                <p>No email campaigns yet</p>\n                <p className=\"text-sm\">Create your first campaign to start tracking</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5810},"client/src/pages/integration.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport GmailIntegration from \"@/components/email/gmail-integration\";\nimport EmailTrackingStats from \"@/components/dashboard/email-tracking-stats\";\n\nexport default function IntegrationPage() {\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Integration Hub</h1>\n        <p className=\"text-muted-foreground\">\n          Connect external services and configure email settings for your outreach campaigns\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"gmail\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"gmail\">Gmail Integration</TabsTrigger>\n          <TabsTrigger value=\"tracking\">Email Tracking</TabsTrigger>\n          <TabsTrigger value=\"automation\">Automation</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"gmail\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            <GmailIntegration />\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Email Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Alert>\n                  <i className=\"fas fa-info-circle h-4 w-4\"></i>\n                  <AlertDescription>\n                    Your email settings are configured through environment variables for security:\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"grid gap-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">From Name</label>\n                      <div className=\"mt-1 p-2 bg-muted rounded text-sm\">\n                        {process.env.FROM_NAME || 'OutreachX Team'}\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">From Email</label>\n                      <div className=\"mt-1 p-2 bg-muted rounded text-sm\">\n                        {process.env.FROM_EMAIL || 'Not configured'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"tracking\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            <EmailTrackingStats />\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Tracking Features</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Email Open Tracking</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Track when recipients open your emails with invisible tracking pixels\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Link Click Tracking</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Monitor which links recipients click in your emails\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Reply Detection</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Automatically detect replies and cancel follow-up sequences\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Delivery Status</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Monitor email delivery status and bounce notifications\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"automation\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Follow-up Automation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Alert>\n                  <i className=\"fas fa-robot h-4 w-4\"></i>\n                  <AlertDescription>\n                    Automated follow-up sequences are running in the background. \n                    Follow-ups are automatically cancelled when a lead replies.\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"grid gap-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-clock text-blue-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Scheduled Follow-ups</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Automatically send follow-up emails after specified delays (1-30 days)\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-brain text-purple-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">AI-Generated Content</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Follow-ups use contextual AI generation based on previous emails\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-stop text-orange-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Smart Cancellation</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Follow-up sequences stop automatically when leads engage or reply\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-chart-line text-green-600 text-sm\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">Performance Tracking</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Monitor response rates and optimize your follow-up timing\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Automation Rules</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Maximum follow-ups per lead:</span>\n                    <span className=\"font-medium\">3 emails</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Follow-up delay range:</span>\n                    <span className=\"font-medium\">1-30 days</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Auto-cancellation on reply:</span>\n                    <span className=\"font-medium text-green-600\">✓ Enabled</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>AI content generation:</span>\n                    <span className=\"font-medium text-green-600\">✓ Enabled</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Email tracking:</span>\n                    <span className=\"font-medium text-green-600\">✓ Enabled</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10234},"server/services/emailTrackingService.ts":{"content":"import { storage } from \"../storage\";\n\nexport class EmailTrackingService {\n  async trackEmailOpen(trackingId: string): Promise<void> {\n    try {\n      const campaign = await storage.getEmailCampaignByTrackingId(trackingId);\n      if (campaign && campaign.status === 'sent') {\n        await storage.updateEmailCampaign(campaign.id, {\n          status: 'opened',\n        });\n        console.log(`Email opened: Campaign ${campaign.id}`);\n      }\n    } catch (error) {\n      console.error('Error tracking email open:', error);\n    }\n  }\n\n  async trackEmailClick(trackingId: string, originalUrl: string): Promise<string> {\n    try {\n      const campaign = await storage.getEmailCampaignByTrackingId(trackingId);\n      if (campaign) {\n        // For now, we don't update status on click since we already track opens\n        // In the future, you could add a separate clicks tracking table\n        console.log(`Email link clicked: Campaign ${campaign.id} -> ${originalUrl}`);\n      }\n      return originalUrl;\n    } catch (error) {\n      console.error('Error tracking email click:', error);\n      return originalUrl;\n    }\n  }\n\n  async markEmailReplied(messageId: string): Promise<void> {\n    try {\n      // Find campaign by message ID or campaign ID\n      const campaigns = await storage.getEmailCampaigns();\n      let campaign = campaigns.find(c => c.messageId === messageId);\n      \n      // If not found by messageId, try by campaign ID\n      if (!campaign) {\n        campaign = campaigns.find(c => c.id === messageId);\n      }\n      \n      if (campaign) {\n        await storage.updateEmailCampaign(campaign.id, {\n          status: 'replied',\n          repliedAt: new Date(),\n        });\n        \n        // Cancel any scheduled follow-ups for this lead\n        if (campaign.leadId) {\n          await storage.cancelScheduledFollowUps(campaign.leadId);\n          console.log(`Cancelled all follow-ups for lead ${campaign.leadId} due to reply`);\n        }\n        \n        console.log(`Email replied: Campaign ${campaign.id}`);\n      } else {\n        console.log(`No campaign found for messageId: ${messageId}`);\n      }\n    } catch (error) {\n      console.error('Error marking email as replied:', error);\n    }\n  }\n\n  async trackEmailOpen(trackingId: string): Promise<void> {\n    try {\n      const [campaignId] = trackingId.split('_');\n      \n      await storage.updateEmailCampaign(campaignId, {\n        status: 'opened',\n        openedAt: new Date(),\n      });\n      \n      console.log(`Email opened: Campaign ${campaignId}`);\n    } catch (error) {\n      console.error('Error tracking email open:', error);\n    }\n  }\n\n  async trackEmailClick(trackingId: string, originalUrl: string): Promise<string> {\n    try {\n      const [campaignId] = trackingId.split('_');\n      \n      await storage.updateEmailCampaign(campaignId, {\n        status: 'clicked',\n        clickedAt: new Date(),\n      });\n      \n      console.log(`Email link clicked: Campaign ${campaignId}`);\n      return originalUrl;\n    } catch (error) {\n      console.error('Error tracking email click:', error);\n      return originalUrl;\n    }\n  }\n}\n\nexport const emailTrackingService = new EmailTrackingService();","size_bytes":3170},"server/services/followUpScheduler.ts":{"content":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { emailService } from './emailService';\nimport { generateFollowUpEmail } from './gemini';\n\nexport class FollowUpScheduler {\n  private static instance: FollowUpScheduler;\n  private isRunning = false;\n\n  private constructor() {}\n\n  static getInstance(): FollowUpScheduler {\n    if (!FollowUpScheduler.instance) {\n      FollowUpScheduler.instance = new FollowUpScheduler();\n    }\n    return FollowUpScheduler.instance;\n  }\n\n  start(): void {\n    if (this.isRunning) return;\n\n    // Run every 5 minutes to check for scheduled follow-ups\n    cron.schedule('*/5 * * * *', async () => {\n      await this.processScheduledFollowUps();\n    });\n\n    this.isRunning = true;\n    console.log('Follow-up scheduler started');\n  }\n\n  stop(): void {\n    this.isRunning = false;\n    console.log('Follow-up scheduler stopped');\n  }\n\n  async scheduleFollowUp(\n    parentCampaignId: string,\n    delayDays: number,\n    userId: string\n  ): Promise<string> {\n    const parentCampaign = await storage.getEmailCampaignById(parentCampaignId);\n    if (!parentCampaign || !parentCampaign.leadId) {\n      throw new Error('Parent campaign not found');\n    }\n\n    const lead = await storage.getLeadById(parentCampaign.leadId);\n    if (!lead) {\n      throw new Error('Lead not found');\n    }\n\n    // Check if we already have 3 follow-ups for this lead\n    const existingFollowUps = await storage.getFollowUpCampaignsForLead(parentCampaign.leadId);\n    if (existingFollowUps.length >= 3) {\n      throw new Error('Maximum of 3 follow-ups per lead already reached');\n    }\n\n    // Check if parent campaign was already replied to\n    if (parentCampaign.status === 'replied' || parentCampaign.repliedAt) {\n      throw new Error('Cannot schedule follow-up for a campaign that has been replied to');\n    }\n\n    // Generate follow-up email content\n    const followUpEmail = await generateFollowUpEmail({\n      name: lead.name,\n      role: lead.role || 'Decision Maker',\n      company: lead.company,\n      tone: parentCampaign.tone,\n      isFollowUp: true,\n      previousEmailContent: parentCampaign.content,\n    });\n\n    // Calculate scheduled time\n    const scheduledAt = new Date();\n    scheduledAt.setDate(scheduledAt.getDate() + delayDays);\n\n    // Create follow-up campaign\n    const followUpCampaign = await storage.createEmailCampaign({\n      leadId: parentCampaign.leadId,\n      subject: followUpEmail.subject,\n      content: followUpEmail.content,\n      tone: parentCampaign.tone,\n      status: 'draft',\n      isFollowUp: true,\n      followUpSequence: (parentCampaign.followUpSequence || 0) + 1,\n      parentEmailId: parentCampaignId,\n      scheduledAt,\n      createdBy: userId,\n    });\n\n    console.log(`Follow-up #${followUpCampaign.followUpSequence} scheduled for ${scheduledAt.toISOString()}`);\n    return followUpCampaign.id;\n  }\n\n  private async processScheduledFollowUps(): Promise<void> {\n    try {\n      const now = new Date();\n      const scheduledCampaigns = await storage.getScheduledEmailCampaigns(now);\n\n      for (const campaign of scheduledCampaigns) {\n        await this.processScheduledCampaign(campaign);\n      }\n    } catch (error) {\n      console.error('Error processing scheduled follow-ups:', error);\n    }\n  }\n\n  private async processScheduledCampaign(campaign: any): Promise<void> {\n    try {\n      // Check if parent email was replied to\n      if (campaign.parentEmailId) {\n        const parentCampaign = await storage.getEmailCampaignById(campaign.parentEmailId);\n        if (parentCampaign?.repliedAt) {\n          console.log(`Skipping follow-up ${campaign.id} - parent email was replied to`);\n          // Mark as cancelled\n          await storage.updateEmailCampaign(campaign.id, {\n            status: 'bounced', // Using bounced as cancelled status\n          });\n          return;\n        }\n      }\n\n      // Check if lead has been replied to any recent emails\n      if (campaign.leadId) {\n        const recentReplies = await storage.getRecentEmailReplies(campaign.leadId, 7); // Check last 7 days\n        if (recentReplies.length > 0) {\n          console.log(`Skipping follow-up ${campaign.id} - lead has recent replies`);\n          await storage.updateEmailCampaign(campaign.id, {\n            status: 'bounced', // Using bounced as cancelled status\n          });\n          return;\n        }\n      }\n\n      // Send the follow-up email\n      console.log(`Sending scheduled follow-up ${campaign.id}`);\n      const result = await emailService.sendCampaignEmail(campaign.id, campaign.leadId!);\n\n      if (result.success) {\n        console.log(`Follow-up ${campaign.id} sent successfully`);\n      } else {\n        console.error(`Failed to send follow-up ${campaign.id}:`, result.error);\n      }\n    } catch (error) {\n      console.error(`Error processing campaign ${campaign.id}:`, error);\n    }\n  }\n\n  async cancelFollowUpsForLead(leadId: string): Promise<void> {\n    await storage.cancelScheduledFollowUps(leadId);\n    console.log(`Cancelled scheduled follow-ups for lead ${leadId}`);\n  }\n\n  async cancelFollowUp(campaignId: string): Promise<void> {\n    await storage.updateEmailCampaign(campaignId, {\n      status: 'bounced', // Using bounced as cancelled status\n    });\n    console.log(`Cancelled follow-up ${campaignId}`);\n  }\n}\n\n// Export singleton instance\nexport const followUpScheduler = FollowUpScheduler.getInstance();","size_bytes":5398},"server/services/gmailService.ts":{"content":"import { google } from 'googleapis';\nimport { OAuth2Client } from 'google-auth-library';\nimport type { EmailProvider, EmailSendParams, EmailSendResult } from './emailService';\n\nexport interface GmailConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  refreshToken: string;\n  accessToken?: string;\n}\n\nexport class GmailProvider implements EmailProvider {\n  private oauth2Client: OAuth2Client;\n  private gmail: any;\n\n  constructor(config: GmailConfig) {\n    this.oauth2Client = new google.auth.OAuth2(\n      config.clientId,\n      config.clientSecret,\n      config.redirectUri\n    );\n\n    this.oauth2Client.setCredentials({\n      refresh_token: config.refreshToken,\n      access_token: config.accessToken,\n    });\n\n    this.gmail = google.gmail({ version: 'v1', auth: this.oauth2Client });\n  }\n\n  async sendEmail(params: EmailSendParams): Promise<EmailSendResult> {\n    try {\n      // Add tracking pixels and links\n      const trackedContent = this.addTracking(params.content, params.trackingId);\n      \n      // Construct email message\n      const emailMessage = this.constructEmailMessage({\n        to: params.to,\n        subject: params.subject,\n        content: trackedContent,\n        fromName: params.fromName,\n        fromEmail: params.fromEmail,\n      });\n\n      const response = await this.gmail.users.messages.send({\n        userId: 'me',\n        requestBody: {\n          raw: emailMessage,\n        },\n      });\n\n      return {\n        success: true,\n        messageId: response.data.id,\n        trackingId: params.trackingId,\n      };\n    } catch (error) {\n      console.error('Gmail send error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async trackOpen(trackingId: string): Promise<void> {\n    console.log(`Email opened: ${trackingId}`);\n    // Implementation handled by the tracking pixel endpoint\n  }\n\n  async trackClick(trackingId: string, url: string): Promise<void> {\n    console.log(`Link clicked: ${trackingId} -> ${url}`);\n    // Implementation handled by the link tracking endpoint\n  }\n\n  private constructEmailMessage(params: {\n    to: string;\n    subject: string;\n    content: string;\n    fromName: string;\n    fromEmail: string;\n  }): string {\n    const email = [\n      `From: ${params.fromName} <${params.fromEmail}>`,\n      `To: ${params.to}`,\n      `Subject: ${params.subject}`,\n      'Content-Type: text/html; charset=utf-8',\n      '',\n      params.content,\n    ].join('\\n');\n\n    return Buffer.from(email).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_');\n  }\n\n  private addTracking(content: string, trackingId?: string): string {\n    if (!trackingId) return content;\n\n    // Add tracking pixel for open tracking\n    const trackingPixel = `<img src=\"${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/api/email/track-open/${trackingId}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\n\n    // Add tracking to links\n    const trackedContent = content.replace(\n      /<a\\s+href=\"([^\"]+)\"/g,\n      `<a href=\"${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/api/email/track-click/${trackingId}?url=$1\"`\n    );\n\n    return trackedContent + trackingPixel;\n  }\n\n  static async getAuthUrl(config: Omit<GmailConfig, 'refreshToken' | 'accessToken'>): Promise<string> {\n    const oauth2Client = new google.auth.OAuth2(\n      config.clientId,\n      config.clientSecret,\n      config.redirectUri\n    );\n\n    const scopes = [\n      'https://www.googleapis.com/auth/gmail.send',\n      'https://www.googleapis.com/auth/gmail.readonly',\n    ];\n\n    return oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: scopes,\n    });\n  }\n\n  static async getTokensFromCode(\n    code: string,\n    config: Omit<GmailConfig, 'refreshToken' | 'accessToken'>\n  ): Promise<{ refreshToken: string; accessToken: string }> {\n    const oauth2Client = new google.auth.OAuth2(\n      config.clientId,\n      config.clientSecret,\n      config.redirectUri\n    );\n\n    const { tokens } = await oauth2Client.getToken(code);\n    \n    return {\n      refreshToken: tokens.refresh_token!,\n      accessToken: tokens.access_token!,\n    };\n  }\n}","size_bytes":4209},"client/src/components/email/follow-up-scheduler.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FollowUpSchedule {\n  id?: string;\n  sequence: number;\n  delayDays: number;\n  subject: string;\n  content: string;\n  tone: string;\n  enabled: boolean;\n  status?: string;\n  scheduledAt?: string;\n}\n\ninterface FollowUpSchedulerProps {\n  campaignId: string;\n  leadName: string;\n  leadCompany: string;\n  leadRole: string;\n  originalTone: string;\n  onSuccess?: () => void;\n}\n\nexport default function FollowUpScheduler({ \n  campaignId, \n  leadName, \n  leadCompany, \n  leadRole, \n  originalTone,\n  onSuccess \n}: FollowUpSchedulerProps) {\n  const [schedules, setSchedules] = useState<FollowUpSchedule[]>([\n    {\n      sequence: 1,\n      delayDays: 3,\n      subject: \"\",\n      content: \"\",\n      tone: originalTone,\n      enabled: true\n    },\n    {\n      sequence: 2,\n      delayDays: 7,\n      subject: \"\",\n      content: \"\",\n      tone: originalTone,\n      enabled: false\n    },\n    {\n      sequence: 3,\n      delayDays: 14,\n      subject: \"\",\n      content: \"\",\n      tone: originalTone,\n      enabled: false\n    }\n  ]);\n\n  const [activeTab, setActiveTab] = useState(\"schedule-1\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch existing follow-ups\n  const { data: existingFollowUps } = useQuery({\n    queryKey: [`/api/email-campaigns/${campaignId}/followups`],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/email-campaigns/${campaignId}/followups`);\n      return response.json();\n    },\n  });\n\n  // Load existing follow-ups into schedules\n  useEffect(() => {\n    if (existingFollowUps?.length > 0) {\n      const updatedSchedules = [...schedules];\n      existingFollowUps.forEach((followUp: any) => {\n        const index = followUp.followUpSequence - 1;\n        if (index >= 0 && index < 3) {\n          updatedSchedules[index] = {\n            id: followUp.id,\n            sequence: followUp.followUpSequence,\n            delayDays: followUp.delayDays || updatedSchedules[index].delayDays,\n            subject: followUp.subject,\n            content: followUp.content,\n            tone: followUp.tone,\n            enabled: true,\n            status: followUp.status,\n            scheduledAt: followUp.scheduledAt\n          };\n        }\n      });\n      setSchedules(updatedSchedules);\n    }\n  }, [existingFollowUps]);\n\n  const generateEmailMutation = useMutation({\n    mutationFn: async (data: { sequence: number; tone: string; delayDays: number }) => {\n      return await apiRequest(\"POST\", `/api/email-campaigns/${campaignId}/generate-followup`, data);\n    },\n    onSuccess: (response, variables) => {\n      const { sequence } = variables;\n      const index = sequence - 1;\n      setSchedules(prev => {\n        const newSchedules = [...prev];\n        newSchedules[index] = {\n          ...newSchedules[index],\n          subject: response.subject,\n          content: response.content\n        };\n        return newSchedules;\n      });\n      toast({\n        title: \"Email Generated\",\n        description: `Follow-up #${sequence} content generated successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate email content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveSchedulesMutation = useMutation({\n    mutationFn: async (data: { schedules: FollowUpSchedule[] }) => {\n      return await apiRequest(\"POST\", `/api/email-campaigns/${campaignId}/update-followups`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Follow-up schedules saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/email-campaigns/${campaignId}/followups`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-campaigns\"] });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save follow-up schedules\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFollowUpMutation = useMutation({\n    mutationFn: async (followUpId: string) => {\n      return await apiRequest(\"DELETE\", `/api/email-campaigns/followup/${followUpId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Follow-up deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/email-campaigns/${campaignId}/followups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete follow-up\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSchedule = (index: number, updates: Partial<FollowUpSchedule>) => {\n    setSchedules(prev => {\n      const newSchedules = [...prev];\n      newSchedules[index] = { ...newSchedules[index], ...updates };\n      return newSchedules;\n    });\n  };\n\n  const handleGenerateEmail = (sequence: number) => {\n    const schedule = schedules[sequence - 1];\n    generateEmailMutation.mutate({\n      sequence,\n      tone: schedule.tone,\n      delayDays: schedule.delayDays\n    });\n  };\n\n  const handleSaveSchedules = () => {\n    const enabledSchedules = schedules.filter(s => s.enabled);\n    saveSchedulesMutation.mutate({ schedules: enabledSchedules });\n  };\n\n  const handleDeleteFollowUp = (followUpId: string, sequence: number) => {\n    deleteFollowUpMutation.mutate(followUpId);\n    // Reset the schedule to default\n    updateSchedule(sequence - 1, {\n      id: undefined,\n      subject: \"\",\n      content: \"\",\n      enabled: false,\n      status: undefined,\n      scheduledAt: undefined\n    });\n  };\n\n  const getStatusBadge = (schedule: FollowUpSchedule) => {\n    if (!schedule.enabled) return <Badge variant=\"secondary\">Disabled</Badge>;\n    if (!schedule.id) return <Badge variant=\"outline\">Not Scheduled</Badge>;\n    \n    switch (schedule.status) {\n      case \"draft\":\n        return <Badge variant=\"default\">Scheduled</Badge>;\n      case \"sent\":\n        return <Badge variant=\"destructive\">Sent</Badge>;\n      case \"bounced\":\n        return <Badge variant=\"secondary\">Cancelled</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Follow-up Campaign Manager</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Configure up to 3 automated follow-ups for {leadName} at {leadCompany}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            {schedules.map((schedule, index) => (\n              <TabsTrigger key={index} value={`schedule-${index + 1}`} className=\"relative\">\n                Follow-up #{index + 1}\n                {schedule.enabled && (\n                  <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-blue-500 rounded-full\" />\n                )}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {schedules.map((schedule, index) => (\n            <TabsContent key={index} value={`schedule-${index + 1}`} className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={schedule.enabled}\n                    onCheckedChange={(enabled) => updateSchedule(index, { enabled })}\n                  />\n                  <Label>Enable Follow-up #{index + 1}</Label>\n                </div>\n                {getStatusBadge(schedule)}\n              </div>\n\n              {schedule.enabled && (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Delay (Days)</Label>\n                      <Select\n                        value={schedule.delayDays.toString()}\n                        onValueChange={(value) => updateSchedule(index, { delayDays: parseInt(value) })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1\">1 day</SelectItem>\n                          <SelectItem value=\"2\">2 days</SelectItem>\n                          <SelectItem value=\"3\">3 days</SelectItem>\n                          <SelectItem value=\"5\">5 days</SelectItem>\n                          <SelectItem value=\"7\">1 week</SelectItem>\n                          <SelectItem value=\"14\">2 weeks</SelectItem>\n                          <SelectItem value=\"21\">3 weeks</SelectItem>\n                          <SelectItem value=\"30\">1 month</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Tone</Label>\n                      <Select\n                        value={schedule.tone}\n                        onValueChange={(value) => updateSchedule(index, { tone: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"professional\">Professional</SelectItem>\n                          <SelectItem value=\"friendly\">Friendly</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"direct\">Direct</SelectItem>\n                          <SelectItem value=\"enthusiastic\">Enthusiastic</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Email Subject</Label>\n                    <Input\n                      value={schedule.subject}\n                      onChange={(e) => updateSchedule(index, { subject: e.target.value })}\n                      placeholder={`Follow-up #${index + 1} subject line`}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Email Content</Label>\n                    <Textarea\n                      value={schedule.content}\n                      onChange={(e) => updateSchedule(index, { content: e.target.value })}\n                      placeholder={`Follow-up #${index + 1} email content`}\n                      rows={8}\n                    />\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => handleGenerateEmail(index + 1)}\n                      disabled={generateEmailMutation.isPending}\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      {generateEmailMutation.isPending ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Generating...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-robot mr-2\"></i>\n                          Generate with AI\n                        </>\n                      )}\n                    </Button>\n\n                    {schedule.id && (\n                      <Button\n                        onClick={() => handleDeleteFollowUp(schedule.id!, index + 1)}\n                        disabled={deleteFollowUpMutation.isPending}\n                        variant=\"outline\"\n                        size=\"sm\"\n                      >\n                        <i className=\"fas fa-trash mr-2\"></i>\n                        Delete\n                      </Button>\n                    )}\n                  </div>\n\n                  {schedule.scheduledAt && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Scheduled for: {new Date(schedule.scheduledAt).toLocaleString()}\n                    </div>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        <div className=\"mt-6 pt-4 border-t\">\n          <Button\n            onClick={handleSaveSchedules}\n            disabled={saveSchedulesMutation.isPending}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {saveSchedulesMutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Saving...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-save mr-2\"></i>\n                Save Follow-up Schedules\n              </>\n            )}\n          </Button>\n        </div>\n\n        <div className=\"mt-4 text-xs text-muted-foreground space-y-1\">\n          <p>• Follow-ups will be sent automatically after the specified delay</p>\n          <p>• Follow-ups are cancelled when the lead replies to any email</p>\n          <p>• You can edit schedules before they are sent</p>\n          <p>• Each follow-up can have different timing, content, and tone</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14169},"client/src/components/email/gmail-integration.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function GmailIntegration() {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');\n  const { toast } = useToast();\n\n  const handleConnectGmail = async () => {\n    setIsConnecting(true);\n    try {\n      // Redirect to Gmail OAuth flow\n      window.location.href = '/api/auth/gmail';\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to initiate Gmail connection\",\n        variant: \"destructive\",\n      });\n      setIsConnecting(false);\n    }\n  };\n\n  const checkConnectionStatus = async () => {\n    setConnectionStatus('checking');\n    try {\n      // In a real app, you'd check if Gmail tokens are valid\n      // For now, we'll check if environment variables suggest it's configured\n      const response = await fetch('/api/auth/gmail/status', {\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        setConnectionStatus('connected');\n      } else {\n        setConnectionStatus('disconnected');\n      }\n    } catch (error) {\n      setConnectionStatus('disconnected');\n    }\n  };\n\n  // Check status on component mount\n  useState(() => {\n    checkConnectionStatus();\n  });\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <i className=\"fab fa-google text-red-500\"></i>\n            Gmail Integration\n          </CardTitle>\n          <Badge \n            variant={connectionStatus === 'connected' ? 'default' : 'secondary'}\n            className={connectionStatus === 'connected' ? 'bg-green-100 text-green-700' : ''}\n          >\n            {connectionStatus === 'connected' ? 'Connected' : \n             connectionStatus === 'checking' ? 'Checking...' : 'Not Connected'}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {connectionStatus === 'disconnected' && (\n          <Alert>\n            <i className=\"fas fa-info-circle h-4 w-4\"></i>\n            <AlertDescription>\n              Connect your Gmail account to send emails directly from OutreachX. \n              You'll need to set up Gmail API credentials first.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {connectionStatus === 'connected' && (\n          <Alert className=\"border-green-200 bg-green-50\">\n            <i className=\"fas fa-check-circle h-4 w-4 text-green-600\"></i>\n            <AlertDescription className=\"text-green-700\">\n              Gmail is connected and ready to send emails. All outreach emails will be sent through your Gmail account.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium\">Setup Instructions:</h4>\n          <ol className=\"text-sm text-muted-foreground space-y-1 list-decimal list-inside\">\n            <li>Go to Google Cloud Console and create a project</li>\n            <li>Enable the Gmail API for your project</li>\n            <li>Create OAuth 2.0 credentials</li>\n            <li>Set the redirect URI to: <code className=\"bg-muted px-1 rounded\">{window.location.origin}/api/auth/gmail/callback</code></li>\n            <li>Add your credentials as environment variables</li>\n          </ol>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleConnectGmail}\n            disabled={isConnecting || connectionStatus === 'connected'}\n            className=\"flex-1\"\n            data-testid=\"button-connect-gmail\"\n          >\n            {isConnecting ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Connecting...\n              </>\n            ) : connectionStatus === 'connected' ? (\n              <>\n                <i className=\"fas fa-check mr-2\"></i>\n                Connected to Gmail\n              </>\n            ) : (\n              <>\n                <i className=\"fab fa-google mr-2\"></i>\n                Connect Gmail\n              </>\n            )}\n          </Button>\n\n          {connectionStatus === 'connected' && (\n            <Button\n              onClick={checkConnectionStatus}\n              variant=\"outline\"\n              data-testid=\"button-refresh-status\"\n            >\n              <i className=\"fas fa-refresh mr-2\"></i>\n              Refresh\n            </Button>\n          )}\n        </div>\n\n        {connectionStatus === 'disconnected' && (\n          <div className=\"text-xs text-muted-foreground\">\n            <p><strong>Required Environment Variables:</strong></p>\n            <ul className=\"mt-1 space-y-1\">\n              <li>• GMAIL_CLIENT_ID</li>\n              <li>• GMAIL_CLIENT_SECRET</li>\n              <li>• GMAIL_REFRESH_TOKEN (obtained after first auth)</li>\n              <li>• GMAIL_ACCESS_TOKEN (optional, will be refreshed automatically)</li>\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5403},"scripts/README.md":{"content":"# Gmail OAuth Setup Script\n\nThis script helps you obtain the required Gmail API tokens for email functionality.\n\n## Prerequisites\n\n1. **Google Cloud Console Setup** (if not done already):\n   - Go to [Google Cloud Console](https://console.cloud.google.com)\n   - Create or select your project\n   - Enable Gmail API: APIs & Services → Library → Search \"Gmail API\" → Enable\n   - Create OAuth credentials: APIs & Services → Credentials → Create credentials → OAuth client ID\n   - Choose \"Desktop application\" type\n   - Download the credentials JSON file\n\n2. **Environment Variables**:\n   You should already have these set in your Replit secrets:\n   - `GMAIL_CLIENT_ID`\n   - `GMAIL_CLIENT_SECRET`\n\n## Running the Script\n\n1. **Install dependencies**:\n   ```bash\n   npm install googleapis open\n   ```\n\n2. **Run the script**:\n   ```bash\n   node scripts/gmail-oauth-setup.js\n   ```\n\n3. **Follow the prompts**:\n   - The script will open your browser automatically\n   - Sign in to your Google account\n   - Grant permissions to your application\n   - The script will capture the tokens automatically\n\n4. **Copy the tokens**:\n   - Copy the `GMAIL_REFRESH_TOKEN` and `GMAIL_ACCESS_TOKEN`\n   - Add them to your Replit secrets\n\n## What the script does\n\n1. Creates a temporary local server on port 3000\n2. Opens Gmail authorization URL in your browser\n3. Handles the OAuth callback automatically\n4. Exchanges the authorization code for access and refresh tokens\n5. Tests the tokens to make sure they work\n6. Provides you with the tokens to add to your project\n\n## Troubleshooting\n\n**No refresh token received?**\n- This happens if you've authorized the app before\n- Go to [Google Account Permissions](https://myaccount.google.com/permissions)\n- Find your app and revoke access\n- Run the script again\n\n**Port 3000 already in use?**\n- Close any applications using port 3000\n- Or modify the script to use a different port\n\n**Browser doesn't open automatically?**\n- Copy the authorization URL from the terminal\n- Paste it in your browser manually\n\n## Security Notes\n\n- Keep your refresh token secure - it doesn't expire\n- Access tokens expire every hour but refresh automatically\n- Never share these tokens publicly\n- Store them securely in your environment variables","size_bytes":2255},"scripts/gmail-oauth-setup.js":{"content":"#!/usr/bin/env node\n\n/**\n * Gmail OAuth Setup Script\n * This script helps you obtain refresh and access tokens for Gmail API\n * \n * Prerequisites:\n * 1. You need GMAIL_CLIENT_ID and GMAIL_CLIENT_SECRET from Google Cloud Console\n * 2. Run: npm install googleapis open\n * 3. Run this script: node scripts/gmail-oauth-setup.js\n */\n\nimport { google } from 'googleapis';\nimport http from 'http';\nimport url from 'url';\nimport open from 'open';\nimport readline from 'readline';\n\n// OAuth2 configuration\nconst SCOPES = [\n  'https://www.googleapis.com/auth/gmail.send',\n  'https://www.googleapis.com/auth/gmail.readonly',\n  'https://www.googleapis.com/auth/gmail.modify'\n];\n\nconst REDIRECT_URI = 'http://localhost:3000/oauth/callback';\n\nasync function setupGmailOAuth() {\n  console.log('🚀 Gmail OAuth Setup Script');\n  console.log('================================\\n');\n\n  // Get credentials from environment or prompt\n  const clientId = process.env.GMAIL_CLIENT_ID;\n  const clientSecret = process.env.GMAIL_CLIENT_SECRET;\n\n  if (!clientId || !clientSecret) {\n    console.error('❌ Missing credentials!');\n    console.log('Please set the following environment variables:');\n    console.log('- GMAIL_CLIENT_ID');\n    console.log('- GMAIL_CLIENT_SECRET\\n');\n    console.log('Get these from Google Cloud Console:');\n    console.log('1. Go to https://console.cloud.google.com');\n    console.log('2. Create/select project → APIs & Services → Credentials');\n    console.log('3. Create OAuth 2.0 Client ID (Desktop Application type)');\n    console.log('4. Download credentials and use Client ID/Secret');\n    return;\n  }\n\n  console.log('✅ Found Gmail credentials');\n  console.log(`Client ID: ${clientId.substring(0, 20)}...`);\n\n  // Create OAuth2 client\n  const oauth2Client = new google.auth.OAuth2(\n    clientId,\n    clientSecret,\n    REDIRECT_URI\n  );\n\n  // Generate authorization URL\n  const authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline', // Important: needed for refresh token\n    scope: SCOPES,\n    prompt: 'consent' // Force consent screen to get refresh token\n  });\n\n  console.log('\\n📋 Setup Steps:');\n  console.log('1. Opening authorization URL in your browser...');\n  console.log('2. Sign in to your Google account');\n  console.log('3. Grant permissions to your application');\n  console.log('4. You\\'ll be redirected to localhost (this script will handle it)');\n  console.log('\\nIf browser doesn\\'t open automatically, visit:');\n  console.log(authUrl);\n\n  // Create temporary server to handle callback\n  const server = http.createServer(async (req, res) => {\n    const parsedUrl = url.parse(req.url, true);\n    \n    if (parsedUrl.pathname === '/oauth/callback') {\n      const { code, error } = parsedUrl.query;\n      \n      if (error) {\n        res.writeHead(400, { 'Content-Type': 'text/html' });\n        res.end(`\n          <h1>❌ Authorization Failed</h1>\n          <p>Error: ${error}</p>\n          <p>Please try running the script again.</p>\n        `);\n        server.close();\n        return;\n      }\n\n      if (code) {\n        try {\n          // Exchange code for tokens\n          const { tokens } = await oauth2Client.getToken(code);\n          \n          res.writeHead(200, { 'Content-Type': 'text/html' });\n          res.end(`\n            <h1>✅ Authorization Successful!</h1>\n            <p>You can close this tab and return to your terminal.</p>\n            <style>\n              body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; padding: 2rem; text-align: center; }\n              h1 { color: #28a745; }\n            </style>\n          `);\n\n          // Display tokens\n          console.log('\\n🎉 Success! Here are your tokens:');\n          console.log('=====================================');\n          \n          if (tokens.refresh_token) {\n            console.log('\\n📝 GMAIL_REFRESH_TOKEN:');\n            console.log(tokens.refresh_token);\n          } else {\n            console.log('\\n⚠️  No refresh token received. This might happen if:');\n            console.log('   - You\\'ve authorized this app before');\n            console.log('   - Try revoking access at https://myaccount.google.com/permissions');\n            console.log('   - Then run this script again');\n          }\n          \n          console.log('\\n🔑 GMAIL_ACCESS_TOKEN:');\n          console.log(tokens.access_token);\n          \n          console.log('\\n📋 Next Steps:');\n          console.log('1. Copy the tokens above');\n          console.log('2. Add them as secrets in your Replit project:');\n          console.log('   - GMAIL_REFRESH_TOKEN');\n          console.log('   - GMAIL_ACCESS_TOKEN');\n          console.log('3. Your Gmail integration is ready! 🚀');\n\n          // Test the tokens\n          if (tokens.refresh_token && tokens.access_token) {\n            console.log('\\n🧪 Testing tokens...');\n            oauth2Client.setCredentials(tokens);\n            \n            try {\n              const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n              const profile = await gmail.users.getProfile({ userId: 'me' });\n              console.log(`✅ Token test successful! Gmail account: ${profile.data.emailAddress}`);\n            } catch (testError) {\n              console.log(`⚠️  Token test failed: ${testError.message}`);\n              console.log('   Tokens were generated but may need verification');\n            }\n          }\n\n          server.close();\n          \n        } catch (tokenError) {\n          console.error('\\n❌ Failed to exchange code for tokens:', tokenError.message);\n          res.writeHead(500, { 'Content-Type': 'text/html' });\n          res.end(`\n            <h1>❌ Token Exchange Failed</h1>\n            <p>Error: ${tokenError.message}</p>\n          `);\n          server.close();\n        }\n      }\n    } else {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('Not Found');\n    }\n  });\n\n  // Start server\n  server.listen(3000, () => {\n    console.log('\\n🌐 Started local server on http://localhost:3000');\n    console.log('⏳ Waiting for authorization...\\n');\n    \n    // Open browser\n    setTimeout(() => {\n      open(authUrl).catch(() => {\n        console.log('Could not open browser automatically.');\n      });\n    }, 1000);\n  });\n\n  // Handle server errors\n  server.on('error', (err) => {\n    if (err.code === 'EADDRINUSE') {\n      console.error('❌ Port 3000 is already in use.');\n      console.log('Please close any applications using port 3000 and try again.');\n    } else {\n      console.error('Server error:', err.message);\n    }\n  });\n}\n\n// Run the setup\nsetupGmailOAuth().catch(console.error);\n\nexport { setupGmailOAuth };","size_bytes":6668},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'dev-session-secret-key-12345',\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    name: 'outreach.sid',\n    cookie: {\n      secure: false,\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n      sameSite: 'lax'\n    },\n    rolling: true\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: 'Invalid username or password' });\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Initial setup route - only works when no users exist\n  app.post(\"/api/setup-admin\", async (req, res, next) => {\n    try {\n      const userCount = await storage.getUserCount();\n      if (userCount > 0) {\n        return res.status(403).json({ message: \"Admin user already exists\" });\n      }\n\n      const { username, email, password, firstName, lastName } = req.body;\n      \n      // Validate required fields\n      if (!username || !password || !firstName || !lastName) {\n        return res.status(400).json({ message: \"Username, password, first name, and last name are required\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        email,\n        password: await hashPassword(password),\n        firstName,\n        lastName,\n        role: 'head_admin',\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          createdAt: user.createdAt,\n          updatedAt: user.updatedAt,\n        });\n      });\n    } catch (error) {\n      console.error('Admin setup error:', error);\n      res.status(500).json({ message: \"Admin setup failed\" });\n    }\n  });\n\n  // Check if setup is needed\n  app.get(\"/api/setup-needed\", async (req, res) => {\n    try {\n      const userCount = await storage.getUserCount();\n      res.json({ setupNeeded: userCount === 0 });\n    } catch (error) {\n      console.error('Setup check error:', error);\n      res.status(500).json({ message: \"Failed to check setup status\" });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    if (req.user) {\n      res.status(200).json({\n        id: req.user.id,\n        username: req.user.username,\n        email: req.user.email,\n        firstName: req.user.firstName,\n        lastName: req.user.lastName,\n        role: req.user.role,\n        createdAt: req.user.createdAt,\n        updatedAt: req.user.updatedAt,\n      });\n    } else {\n      res.status(401).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    res.json({\n      id: req.user.id,\n      username: req.user.username,\n      email: req.user.email,\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      role: req.user.role,\n      createdAt: req.user.createdAt,\n      updatedAt: req.user.updatedAt,\n    });\n  });\n\n  // Admin routes for user management\n  app.get(\"/api/admin/users\", requireRole(['head_admin', 'admin']), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const safeUsers = users.map(user => ({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      }));\n      res.json(safeUsers);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/admin/users\", requireRole(['head_admin', 'admin']), async (req, res) => {\n    try {\n      const { username, email, password, firstName, lastName, role } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        email,\n        password: await hashPassword(password),\n        firstName,\n        lastName,\n        role: role || 'designer',\n      });\n\n      res.status(201).json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      });\n    } catch (error) {\n      console.error('Error creating user:', error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id\", requireRole(['head_admin', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { username, email, firstName, lastName, role } = req.body;\n      \n      // Prevent admin from modifying head_admin\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (targetUser.role === 'head_admin' && req.user?.role !== 'head_admin') {\n        return res.status(403).json({ message: \"Cannot modify head admin\" });\n      }\n\n      const user = await storage.updateUser(id, {\n        username,\n        email,\n        firstName,\n        lastName,\n        role,\n      });\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      });\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", requireRole(['head_admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Prevent deleting head_admin\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (targetUser.role === 'head_admin') {\n        return res.status(403).json({ message: \"Cannot delete head admin\" });\n      }\n\n      await storage.deleteUser(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n}\n\n// Middleware to require authentication\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Middleware to require specific roles\nexport function requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    \n    next();\n  };\n}","size_bytes":9413},"client/src/hooks/use-auth.tsx":{"content":"\nimport { createContext, useContext, ReactNode } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ninterface User {\n  id: string;\n  username: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  role?: string;\n}\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  error: Error | null;\n  loginMutation: any;\n  logoutMutation: any;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery({\n    queryKey: [\"/api/user\"],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/user\");\n        if (!response.ok) {\n          if (response.status === 401) {\n            return null;\n          }\n          throw new Error(\"Failed to fetch user\");\n        }\n        return response.json();\n      } catch (error) {\n        console.error(\"Auth error:\", error);\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/user\"], data);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Logout failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const value: AuthContextType = {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n    error: error as Error | null,\n    loginMutation,\n    logoutMutation,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2926},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <Route path={path}>\n      {isLoading ? (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      ) : !user ? (\n        <Redirect to=\"/auth\" />\n      ) : (\n        <Component />\n      )}\n    </Route>\n  );\n}","size_bytes":622},"client/src/pages/admin-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { getQueryFn, apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { User, registerSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, Users, Shield, User as UserIcon } from \"lucide-react\";\n\ntype CreateUserData = Omit<z.infer<typeof registerSchema>, 'confirmPassword'>;\n\nexport default function AdminPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: getQueryFn(),\n  });\n\n  const createUserForm = useForm<CreateUserData>({\n    resolver: zodResolver(registerSchema.omit({ confirmPassword: true })),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"designer\",\n    },\n  });\n\n  const editUserForm = useForm<Partial<CreateUserData>>({\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"designer\",\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserData) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/users\", userData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsCreateDialogOpen(false);\n      createUserForm.reset();\n      toast({\n        title: \"User created\",\n        description: \"New user has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, userData }: { id: string; userData: Partial<CreateUserData> }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/users/${id}`, userData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setEditingUser(null);\n      editUserForm.reset();\n      toast({\n        title: \"User updated\",\n        description: \"User has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User deleted\",\n        description: \"User has been deleted successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check if current user has admin privileges\n  if (!user || !['head_admin', 'admin'].includes(user.role)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Access Denied\n            </CardTitle>\n            <CardDescription>\n              You don't have permission to access this page.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  const onCreateUser = (data: CreateUserData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const onUpdateUser = (data: Partial<CreateUserData>) => {\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, userData: data });\n    }\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    editUserForm.reset({\n      username: user.username,\n      email: user.email || '',\n      firstName: user.firstName || '',\n      lastName: user.lastName || '',\n      role: user.role,\n    });\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'head_admin':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'admin':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      case 'founder':\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      case 'strategist':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Users className=\"h-8 w-8\" />\n            User Management\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage users and their roles in your organization\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-user\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New User</DialogTitle>\n              <DialogDescription>\n                Create a new user account for your organization.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createUserForm}>\n              <form onSubmit={createUserForm.handleSubmit(onCreateUser)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createUserForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-admin-firstname\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createUserForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-admin-lastname\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createUserForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-admin-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createUserForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" data-testid=\"input-admin-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createUserForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-admin-role\">\n                            <SelectValue placeholder=\"Select role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {user?.role === 'head_admin' && (\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          )}\n                          <SelectItem value=\"founder\">Founder</SelectItem>\n                          <SelectItem value=\"strategist\">Strategist</SelectItem>\n                          <SelectItem value=\"designer\">Designer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createUserForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"password\" data-testid=\"input-admin-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"button-create-user\"\n                    disabled={createUserMutation.isPending}\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Users</CardTitle>\n          <CardDescription>\n            All users in your organization and their roles\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading users...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users?.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <UserIcon className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\" data-testid={`text-user-name-${user.id}`}>\n                            {user.firstName} {user.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            @{user.username}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`text-user-email-${user.id}`}>\n                      {user.email || 'No email'}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getRoleBadgeColor(user.role)}>\n                        {user.role.replace('_', ' ')}\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-user-created-${user.id}`}>\n                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Dialog \n                          open={editingUser?.id === user.id} \n                          onOpenChange={(open) => !open && setEditingUser(null)}\n                        >\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-edit-${user.id}`}\n                              onClick={() => handleEditUser(user)}\n                              disabled={user.role === 'head_admin' && user.role !== user?.role}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Edit User</DialogTitle>\n                              <DialogDescription>\n                                Update user information and role.\n                              </DialogDescription>\n                            </DialogHeader>\n                            <Form {...editUserForm}>\n                              <form onSubmit={editUserForm.handleSubmit(onUpdateUser)} className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <FormField\n                                    control={editUserForm.control}\n                                    name=\"firstName\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>First Name</FormLabel>\n                                        <FormControl>\n                                          <Input {...field} data-testid=\"input-edit-firstname\" />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                  <FormField\n                                    control={editUserForm.control}\n                                    name=\"lastName\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Last Name</FormLabel>\n                                        <FormControl>\n                                          <Input {...field} data-testid=\"input-edit-lastname\" />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                                <FormField\n                                  control={editUserForm.control}\n                                  name=\"username\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Username</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} data-testid=\"input-edit-username\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={editUserForm.control}\n                                  name=\"email\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Email</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} type=\"email\" data-testid=\"input-edit-email\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={editUserForm.control}\n                                  name=\"role\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Role</FormLabel>\n                                      <Select onValueChange={field.onChange} value={field.value}>\n                                        <FormControl>\n                                          <SelectTrigger data-testid=\"select-edit-role\">\n                                            <SelectValue placeholder=\"Select role\" />\n                                          </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                          {user?.role === 'head_admin' && (\n                                            <SelectItem value=\"admin\">Admin</SelectItem>\n                                          )}\n                                          <SelectItem value=\"founder\">Founder</SelectItem>\n                                          <SelectItem value=\"strategist\">Strategist</SelectItem>\n                                          <SelectItem value=\"designer\">Designer</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <div className=\"flex justify-end space-x-2\">\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    onClick={() => setEditingUser(null)}\n                                  >\n                                    Cancel\n                                  </Button>\n                                  <Button \n                                    type=\"submit\" \n                                    data-testid=\"button-update-user\"\n                                    disabled={updateUserMutation.isPending}\n                                  >\n                                    {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n                                  </Button>\n                                </div>\n                              </form>\n                            </Form>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        {user?.role === 'head_admin' && user.role !== 'head_admin' && (\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                data-testid={`button-delete-${user.id}`}\n                                className=\"text-destructive hover:text-destructive\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete {user.firstName} {user.lastName}? \n                                  This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteUserMutation.mutate(user.id)}\n                                  className=\"bg-destructive hover:bg-destructive/90\"\n                                  data-testid={`button-confirm-delete-${user.id}`}\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":23131},"client/src/pages/auth-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Redirect } from \"wouter\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mail, Users, Zap } from \"lucide-react\";\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Auth forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold\">OutreachX</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              AI-powered lead outreach for design studios\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Welcome back</CardTitle>\n              <CardDescription>\n                Sign in to your OutreachX account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...loginForm}>\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <FormField\n                    control={loginForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            data-testid=\"input-username\"\n                            placeholder=\"Enter your username\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={loginForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"password\" \n                            data-testid=\"input-password\"\n                            placeholder=\"Enter your password\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    data-testid=\"button-login\"\n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-950 dark:to-indigo-900 items-center justify-center p-12\">\n        <div className=\"max-w-lg text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-gray-100\">\n              Scale Your Outreach with AI\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Generate personalized cold emails, manage leads, and track performance - all powered by AI\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 mt-12\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-500 rounded-lg\">\n                <Mail className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">AI Email Generation</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Create personalized cold emails in seconds\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-500 rounded-lg\">\n                <Users className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">Lead Management</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Track and organize your prospects efficiently\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-purple-500 rounded-lg\">\n                <Zap className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">Automated Follow-ups</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Never miss a follow-up opportunity\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6121},"client/src/pages/setup-page.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, User } from \"lucide-react\";\n\nconst setupSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Valid email is required\").optional(),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\ntype SetupFormData = z.infer<typeof setupSchema>;\n\ninterface SetupPageProps {\n  onSetupComplete: () => void;\n}\n\nexport default function SetupPage({ onSetupComplete }: SetupPageProps) {\n  const { toast } = useToast();\n\n  const form = useForm<SetupFormData>({\n    resolver: zodResolver(setupSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const setupMutation = useMutation({\n    mutationFn: async (data: SetupFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/setup-admin\", data);\n      return await res.json();\n    },\n    onSuccess: (userData) => {\n      // Set both user data and setup status in cache\n      queryClient.setQueryData([\"/api/user\"], userData);\n      queryClient.setQueryData([\"/api/setup-needed\"], { setupNeeded: false });\n      toast({\n        title: \"Setup complete\",\n        description: \"Head admin account created successfully. You are now logged in.\",\n      });\n      onSetupComplete();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Setup failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SetupFormData) => {\n    setupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-950 dark:to-indigo-900 p-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-4 bg-blue-500 rounded-full\">\n              <Shield className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold\">OutreachX Setup</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Create your head admin account to get started\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Head Admin Account\n            </CardTitle>\n            <CardDescription>\n              This will be the primary administrator account with full system access\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            data-testid=\"input-setup-firstname\"\n                            placeholder=\"First name\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            data-testid=\"input-setup-lastname\"\n                            placeholder=\"Last name\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          data-testid=\"input-setup-username\"\n                          placeholder=\"Choose a username\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          data-testid=\"input-setup-email\"\n                          placeholder=\"Enter your email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          data-testid=\"input-setup-password\"\n                          placeholder=\"Create a secure password\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  data-testid=\"button-setup-admin\"\n                  disabled={setupMutation.isPending}\n                >\n                  {setupMutation.isPending ? \"Creating account...\" : \"Create Head Admin Account\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          <p>\n            As the head admin, you'll be able to create and manage other admin users\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7473}}}